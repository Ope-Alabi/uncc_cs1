<<<<<<< HEAD
<?xml version="1.0"?>
<section xml:id="lists_strings-and-lists">
  <title>Strings and Lists</title>
  <p>Two of the most useful methods on strings involve lists of
            strings. The <c>split</c> method
            breaks a string into a list of words.  By
            default, any number of whitespace characters is considered a word boundary.</p>
  <program xml:id="ch09_split1" interactive="activecode" language="python">
    <input>
song = "The rain in Spain..."
wds = song.split()
print(wds)
        </input>
  </program>
  <p>An optional argument called a <term>delimiter</term> can be used to specify which
            characters to use as word boundaries. The following example uses the string
            <c>ai</c> as the delimiter:</p>
  <program xml:id="ch09_split2" interactive="activecode" language="python">
    <input>
song = "The rain in Spain..."
wds = song.split('ai')
print(wds)
        </input>
  </program>
  <p>Notice that the delimiter doesn't appear in the result.</p>
  <p>The inverse of the <c>split</c> method is <c>join</c>.  You choose a
            desired <term>separator</term> string, (often called the <em>glue</em>)
            and join the list with the glue between each of the elements.</p>
  <program xml:id="ch09_join" interactive="activecode" language="python">
    <input>
wds = ["red", "blue", "green"]
glue = ';'
s = glue.join(wds)
print(s)
print(wds)

print("***".join(wds))
print("".join(wds))
        </input>
  </program>
  <p>The list that you glue together (<c>wds</c> in this example) is not modified.  Also,
            you can use empty glue or multi-character strings as glue.</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question9_22_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
myname = "Edgar Allan Poe"
namelist = myname.split()
init = ""
for aname in namelist:
    init = init + aname[0]
print(init)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Poe</p>
        </statement>
        <feedback><p>
                    Three characters but not the right ones.  namelist is the list of names.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>EdgarAllanPoe</p>
        </statement>
        <feedback><p>
                    Too many characters in this case.  There should be a single letter from each name.
                </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>EAP</p>
        </statement>
        <feedback><p>
                    Yes, split creates a list of the three names.  The for loop iterates through the names and creates a string from the first characters.
                </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>William Shakespeare</p>
        </statement>
        <feedback><p>
                    That does not make any sense.
                </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
=======
<?xml version="1.0"?>
<section xml:id="lists_strings-and-lists">
  <title>Strings and Lists</title>
  <p>Two of the most useful methods on strings involve lists of
            strings. The <c>split</c> method
            breaks a string into a list of words.  By
            default, any number of whitespace characters is considered a word boundary.</p>
  <program xml:id="ch4_sec11_p1" interactive="activecode" language="python">
    <input>
song = "The rain in Spain..."
wds = song.split()
print(wds)

        </input>
  </program>
  <p>An optional argument called a <term>delimiter</term> can be used to specify which
            characters to use as word boundaries.</p>
  <program xml:id="ch4_sec11_p2" interactive="activecode" language="python">
    <input>
song = "The rain, and the flood in Spain..."

#These are the same as the default is to split on whitespace:
print(song.split())
print(song.split(' '))

#If we want to split on something else, we can do that too:
abc = song.split(',')
print(abc)
wds = song.split('ai')
print(wds)

# Notice that the split is a string method, so it does not modify the original string.
print(song)

        </input>
  </program>
  <p>Notice that the delimiter doesn't appear in the result.</p>
  <p>The inverse of the <c>split</c> method is <c>join</c>.  You choose a
            desired <term>separator</term> string, (often called the <em>glue</em>)
            and join the list with the glue between each of the elements.</p>
  <program xml:id="ch4_sec11_p3" interactive="activecode" language="python">
    <input>
wds = ["red", "blue", "green"]
glue = ';'
s = glue.join(wds)
print(s)
print(wds)

print("***".join(wds))
print("".join(wds))
        </input>
  </program>
  <p>The list that you glue together (<c>wds</c> in this example) is not modified.  Also,
            you can use empty glue or multi-character strings as glue.</p>

  <p>
    <term>index Method in Lists and Strings</term>
  </p>
<p> One important thing to note is that even though <c>index</c> methods is named the same in the context of strings and lists, they behave differently. 
With strings, the index method looks for a substring (or a character), and returns the first instance of that character. 
However, with lists, the index method looks for an element and returns the first instance of that element. </p>


<program xml:id="ch4_sec11_p4" interactive="activecode" language="python">
    <input>

my_str = "To a great mind, nothing is little,' remarked Holmes, sententiously."
print(my_str.index("great")) # Finds the substring "great" in my_str, expected result is 5
print(my_str.index("n")) # Finds the character "n" in my_str, expected result is 13 (first occurence)

    </input>
  </program>
  <p> What happens when I split the string to a list? </p>

<program xml:id="ch4_sec11_p5" interactive="activecode" language="python">
    <input>
my_str = "To a great mind, nothing is little,' remarked Holmes, sententiously."
my_list = my_str.split() 
print(my_list)
print(my_list.index("great")) # Finds the element "great" in my_list, expected result is 2
print(my_list.index("n")) # "n" is NOT an element in my_list, expected result is an error
    </input>
  </program>

<p> <term> BONUS: </term> Check this example after reading the next section (List Type Conversion Function) and spot the difference! </p>

<program xml:id="ch4_sec11_p6" interactive="activecode" language="python">
    <input>
my_str = "To a great mind, nothing is little,' remarked Holmes, sententiously."

char_by_char = list(my_str) 
print(char_by_char)
print(char_by_char.index("n")) # Finds the element "n" in char_by_char, expected result is 13
print(char_by_char.index("great")) # "great" is NOT an element in char_by_char, expected result is an error

        </input>
  </program>


  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="ch4_sec11_q1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
myname = "Edgar Allan Poe"
namelist = myname.split()
init = ""
str1 = namelist[0]
str2 = namelist[1]
str3 = namelist[2]
init = init + str1[0] + str2[0] + str3[0]
print(init)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Poe</p>
        </statement>
        <feedback>
                    Three characters but not the right ones.  namelist is the list of names.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>EdgarAllanPoe</p>
        </statement>
        <feedback>
                    Too many characters in this case.  There should be a single letter from each name.
                </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>EAP</p>
        </statement>
        <feedback>
                    Yes, split creates a list of the three names.  
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>William Shakespeare</p>
        </statement>
        <feedback>
                    That does not make any sense.
                </feedback>
      </choice>
    </choices>
  </exercise>
</section>
>>>>>>> 6b21168b0c3243abea66db80c0bd38b03afc202f
