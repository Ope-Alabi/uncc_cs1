<?xml version="1.0"?>
<section xml:id="general-intro_algorithms">
  <title>Algorithms and Computational Thinking</title>
  <p>
    If problem solving is a central part of
    computer science, then the solutions that you create through the problem solving process are also
    important. In computer science, we refer to these solutions as <term>algorithms</term>. An
    algorithm is a step by step list of instructions that if followed exactly will solve the problem
    under consideration. 
</p>
  
  <p>
    <term>Computational thinking</term> is a problem-solving process that involves various
    techniques and skills used to tackle complex problems and design solutions. A complex problem is
    one that, at first glance, lacks an obvious solution. Computational thinking involves breaking
    down this complex problem into smaller, more manageable parts (decomposition). Each of these
    smaller parts is then examined individually, considering how similar problems have been previously
    solved (pattern recognition) and focusing only on the essential details while ignoring irrelevant
    information (abstraction). Next, simple steps or rules are created to solve each of these smaller
    problems (algorithms). Finally, these steps or rules are used to program a computer to solve the
    complex problem in the most efficient way possible. 
  </p>
    
  <p> 
    Our goal in computer science is to take a problem and develop an algorithm that can serve as a general solution. 
    Once we have such a solution, we can use our computer to automate the execution. As noted above, programming is a
    skill that allows a computer scientist to take an algorithm and represent it in a notation (a
    program) that can be followed by a computer. These programs are written in <term>programming
    languages</term>. This process of translating algorithms into computer programs is essential
    because it enables the automated and efficient solving of complex problems, making computational
    thinking a practical and powerful approach to problem-solving. 
  </p>
  <p>
    <q>
    Thinking like a computer scientist means more than being able to
    program a computer. It requires thinking at multiple levels of abstraction. 
    <url href="https://www.cs.cmu.edu/~wing/publications/Wing06.pdf">- Jeannette M. Wing, 2006</url>
    </q>

</p>

  
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="mc_algorithms_1">
    <statement>
      <p>What is the most important skill for a computer scientist?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>To think like a computer.</p>
        </statement>
        <feedback>
          Computers do not think, they only do what we humans tell them to do via programs.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>To be able to write code really well.</p>
        </statement>
        <feedback>
          While it is necessary for most computer scientists to know how to write code, it is not
          the most important skill.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>To be able to solve problems.</p>
        </statement>
        <feedback>
          Computer scientists are all about solving problems. We use computers to automate solutions
  to problems and to do things faster and more accurately than we can do by hand or manually.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>To be really good at math.</p>
        </statement>
        <feedback>
          Computer science and math are similar in many ways and it helps to have a strong
  mathematical foundation, but you do not have to be good at math to be a good computer scientist.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise
    label="mc_algorithms_2">
    <statement>
      <p>An algorithm is:</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>A solution to a problem that can be solved by a computer.</p>
        </statement>
        <feedback>
          While it is true that algorithms often do solve problems, this is not the best answer. An
  algorithm is more than just the solution to the problem for a computer. An algorithm can be used
          to solve all sorts of problems, including those that have nothing to do with computers.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>A step by step list of instructions that if followed exactly will solve the problem
  under consideration.</p>
        </statement>
        <feedback>
          Algorithms are like recipes: they must be followed exactly, they must be clear and
  unambiguous, and they must end.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>A series of instructions implemented in a programming language.</p>
        </statement>
        <feedback>
          Programming languages are used to express algorithms, but an algorithm does not have to be
  expressed in terms of a programming language.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>A special kind of notation used by computer scientists.</p>
        </statement>
        <feedback>
          Computer scientists sometimes use a special notation to illustrate or document an
  algorithm, but this is not the definition of an algorithm.
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>