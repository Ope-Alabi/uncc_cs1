<?xml version="1.0"?>
<section xml:id="iteration_the-for-loop">
  <title>The <c>for</c> loop</title>

  <p>
    The <c>while</c> statement is a general-purpose tool for iteration, and is necessary for any instance of iteration where we don't know how many repetitions will be needed.
    However, if we do know how many are needed, there is a more efficient approach: the <c>for</c> statement.
  </p>

  <p>
    As a simple example, let's say we have some friends, and we'd like to send them each an email inviting them to our party.
    We don't quite know how to send email yet, so for the moment we'll just print a message for each friend.
  </p>
  <program xml:id="ch7_sec8_p1" interactive="activecode" language="python">
    <input>
      for name in ["Joe", "Amy", "Brad", "Angelina", "Zuki", "Thandi", "Paris"]:
        print("Hi, " + name + "! Please come to my party on Saturday!")
    </input>
  </program>

  <p>
    Take a look at the output produced when you press the <c>run</c> button.
    There is one line printed for each friend.
    Here's how it works:
  </p>
  <ul>
    <li><c>name</c> is the <term>loop variable</term> in this case.</li>

    <li>
      Frustratingly, <c>in</c> here is not the same as the keyword used to check for membership.
      This is just a necessary part of every <c>for</c> loop construction and not an operator.
    </li>

    <li>
      The list of names in the square brackets is a regular list.
      Later we'll see that other types besides lists can be put in this spot.
    </li>

    <li>
      Line 2  is the <term>loop body</term>.
      Like with <c>while</c>, the loop body is always indented.
      The loop body is performed one time for each name in the list.
    </li>

    <li>
      On each <em>iteration</em> or <em>pass</em> of the loop, a check is done to see if there are still more items to be processed.
      If there are none left (this is called the <term>terminating condition</term> of the loop), the loop has finished.
      Program execution continues at the next statement after the loop body.
    </li>

    <li>
      If there are items still to be processed, the loop variable is updated to refer to the next item in the list.
      This means, in this case, that the loop body is executed here 7 times, and each time <c>name</c> will refer to a different friend.
    </li>

    <li>At the end of each execution of the body of the loop, Python returns to the <c>for</c> statement, to see if there are more items to be handled.</li>
  </ul>

  <note>
    <p>
      Introduction of the <c>for</c> statement causes us to think about the types of iteration we have seen.
      The <c>for</c> statement will always iterate through a sequence of values like the list of names for the party.
    </p>

    <p>
      Since we know that it will iterate once for each value in the collection, 
      it is often said that a <c>for</c> loop creates a <term>definite iteration</term> because we definitely know how many times we are going to iterate.
      On the other hand, the <c>while</c> statement is dependent on a condition that needs to evaluate to <c>False</c> in order for the loop to terminate.
      Since we do not necessarily know when this will happen, it creates what we call <term>indefinite iteration</term>.
      Indefinite iteration simply means that we don't know how many times we will repeat but 
      eventually the condition controlling the iteration will fail and the iteration will stop (unless we have an infinite loop).
    </p>
  </note>

  <note>
    <title>Choosing between <c>for</c> and <c>while</c></title>

    <p>
      Use a <c>for</c> loop if you know the maximum number of times that you'll need to execute the body. 
      For example, if you're traversing a list of elements, or know the number of times you'll iterate, then choose the <c>for</c> loop.
    </p>

    <p>
      So any problem like "iterate this weather model run for 1000 cycles", "search this list of words", 
      or "check all integers up to 10000 to see which are prime" suggest that a <c>for</c> loop is best.
    </p>

    <p>
      By contrast, if you are required to repeat some computation until some condition is met,
      as we did in the <c>3n + 1</c> problem, you'll need a <c>while</c> loop.
    </p>
  </note>

  <p>
    What you will notice here is that the <c>while</c> loop is more work for you <mdash/> the programmer <mdash/> than the equivalent <c>for</c> loop.
    When using a <c>while</c> loop you have to control the loop variable yourself.
    You give it an initial value, test for completion, and then make sure you change something in the body so that the loop terminates.
  </p>

  <term>Check your understanding</term>
  <exercise label="ch6_sec8_q1">
    <statement><p>True or False: You can rewrite any for-loop as a while-loop.</p></statement>
    <choices>
      <choice correct="yes">
        <statement><p>True</p></statement>
        <feedback>The syntax for a for-loop can make it easier and more appealing, but a while loop is just as powerful as a for-loop and often more flexible.</feedback>
      </choice>

      <choice>
        <statement><p>False</p></statement>
        <feedback>Often a for-loop is more natural and convenient for a task, but that same task can always be expressed using a while loop.</feedback>
      </choice>
    </choices>
  </exercise>

</section>
