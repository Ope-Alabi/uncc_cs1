<?xml version="1.0"?>
<section xml:id="iteration_lists-and-for-loops">
  <title>Traversing lists with the <c>for</c> loop</title>
  <p>It is possible to perform <term>list traversal</term> using iteration by item as well as iteration by index.</p>
  <program xml:id="ch7_sec10_p1" interactive="activecode" language="python">
    <input>
fruits = ["apple", "orange", "banana", "cherry"]

for afruit in fruits:     # by item
    print(afruit)
        </input>
  </program>
  <p>It almost reads like natural language: For (every) fruit in (the list of) fruits,
            print (the name of the) fruit.</p>
  <p>We can also use the indices to access the items in an iterative fashion.</p>
  <program xml:id="ch7_sec10_p2" interactive="activecode" language="python">
    <input>
fruits = ["apple", "orange", "banana", "cherry"]

for position in range(len(fruits)):     # by index
    print(fruits[position])
        </input>
  </program>
  <p>In this example, in each iteration through the loop, the variable <c>position</c> is used as an index into the
            list, printing the <c>position</c>-eth element. Note that we used <c>len(fruits)</c> as the upper bound on the range
            so that we can iterate correctly no matter how many items are in the list.</p>
  <p>Since lists are mutable, it is often desirable to traverse a list, modifying
            each of its elements as you go. The following code squares all the numbers from <c>1</c> to
            <c>5</c> using iteration by position.</p>
  <program xml:id="ch7_sec10_p4" interactive="activecode" language="python">
    <input>
numbers = [1, 2, 3, 4, 5]
print(numbers)

for i in range(len(numbers)):
    numbers[i] = numbers[i] ** 2

print(numbers)
        </input>
  </program>
  <p>Take a moment to think about <c>range(len(numbers))</c> until you understand how
            it works. We are interested here in both the <em>value</em> and its <em>index</em> within the
            list, so that we can assign a new value to it.</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="ch7_sec10_q1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [4, 2, 8, 6, 5]
blist = [ ]
for item in alist:
    blist.append(item+5)
print(blist)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4, 2, 8, 6, 5]</p>
        </statement>
        <feedback>
                    5 is added to each item before the append is peformed.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>[4, 2, 8, 6, 5, 5]</p>
        </statement>
        <feedback>
                    There are too many items in this list.  Only 5 append operations are performed.
                </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[9, 7, 13, 11, 10]</p>
        </statement>
        <feedback>
                    Yes, the for loop processes each item of the list.  5 is added before it is appended to blist.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>Error, you cannot concatenate inside an append.</p>
        </statement>
        <feedback>
                    5 is added to each item before the append is performed.
                </feedback>
      </choice>
    </choices>
  </exercise>
</section>
