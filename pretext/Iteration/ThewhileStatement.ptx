<?xml version="1.0"?>
<section xml:id="iteration_the-while-statement">
  <title>The <c>while</c> Statement</title>

  <!-- <video xml:id="whileloop" youtube="blTBEqybQmQ" width="auto"/> -->

  <p>
    Let's look at our first Python statement that can be used to build an iteration. 
    It is called the <c>while</c> statement. 
    When used with other code it can be used to repeat code in a <term>while loop</term>. 
    Similar to the <c>if</c> statement, it uses a boolean expression to control the flow of execution. 
    The body of while (code indented one space in) will be repeated as long as the controlling boolean expression evaluates to <c>True</c>.
  </p>

  <p>Here is a simple example that counts down from 10 to 0.</p>
  <program xml:id="ac_theWhileStatement_1" label="ac_theWhileStatement_1" interactive="activecode" language="python">
    <input>
      count = 10
      while count > 0:
        print(count)
        count = count - 1
      print("Blastoff!")
    </input>
  </program>

  <p>
    <li>
      <p><c>count</c> is a normal variable here, but since it is governing the <c>while</c> loop it is also called the <term>loop variable</term>.</p>
    </li>
    <li>
      <p>
        Line 2 here is the <term>loop condition</term>. 
        It must always be a boolean expression that will evaluate to <c>False</c> or <c>True</c>.
      </p>
    </li>
    <li>
      <p>
        Lines 3 and 4 are the <term>loop body</term>. 
        The loop body is always indented. 
        The indentation determines exactly what statements are "in the loop". 
        The loop body is run each time the loop is repeated.
      </p>
    </li>
    <li>
      <p>
        On each <em>iteration</em> or <em>pass</em> of the loop, a check is done to see if the loop condition is True (if <c>count</c> is greater than zero). 
        If it is not (this is called the <term>terminating condition</term> of the loop), the loop has finished. 
        Program execution continues at the next statement after the loop body.
      </p>
    </li>
    <li>
      <p>If <c>count</c> is greater than zero, the loop body is executed again.</p>      
    </li>
    <li>
      <p>At the end of each execution of the body of the loop, Python returns to the <c>while</c> statement, to see if the loop should repeat.</p>
    </li>
  </p>

  <p>Notice that if the condition is <c>False</c> the first time through the loop, the statements inside the loop are never executed.</p>

  <warning>
    <p>
      Though Python's <c>while</c> is very close to the English <q>while</q>, there is an important difference: 
      In English <q>while X, do Y</q>, we usually assume that immediately after X becomes false, we stop with Y. 
      In Python there is <em>not</em> an immediate stop: 
      After the initial test, any following tests come only after the execution of the <em>whole</em> body, even if the condition becomes false in the middle of the loop body.
    </p>
  </warning>

  <p>
    The body of the loop should change the value of one or more variables so that eventually the condition becomes <c>False</c> and the loop terminates. 
    Otherwise the loop will repeat forever. 
    This is called an <term>infinite loop</term>.
    An endless source of amusement for computer scientists is the observation that the directions written on the back of the shampoo bottle (lather, rinse, repeat) create an infinite loop.
  </p>

  <p>
    We can use the <c>while</c> loop to create any type of iteration we wish, making it more general-purpose than the <c>for</c> loop we'll in a later section.
    For example, let us consider a program that adds all numbers from <c>1</c> to <c>n</c>. 
    To do this, we will create a variable called <c>aNumber</c> and initialize it to 1, the first number in the summation. 
    Every iteration will add <c>aNumber</c> to the running total until all the values have been used.
    In order to control the iteration, we must create a boolean expression that evaluates to <c>True</c> as long as we want to keep adding values to our running total. 
    In this case, as long as <c>aNumber</c> is less than or equal to the bound, we should keep going.
  </p>

  <p>Here is the summation program that uses a while statement.</p>
  <program xml:id="ac_theWhileStatement_2" label="ac_theWhileStatement_2" interactive="activecode" language="python">
    <input>
      """ Return the sum of 1+2+3 ... n """
      aBound = int(input("Please give a number n: "))
      theSum = 0
      aNumber = 1
      while aNumber &lt;= aBound:
        theSum = theSum + aNumber
        aNumber = aNumber + 1
      print(theSum)
    </input>
  </program>

  <p>
    You can almost read the <c>while</c> statement as if it were in natural language. 
    It means, while <c>aNumber</c> is less than or equal to <c>aBound</c>, continue executing the body of the loop. 
    Within the body, each time, update <c>theSum</c> using the accumulator pattern and increment <c>aNumber</c>. 
    After the body of the loop, we go back up to the condition of the <c>while</c> and reevaluate it. 
    When <c>aNumber</c> becomes greater than <c>aBound</c>, the condition fails and flow of control continues past the loop.
  </p>

  <p>
    In the case shown above, we can prove that the loop terminates because we know that the value of <c>aBound</c> is finite, 
    and we can see that the value of <c>aNumber</c> increments each time through the loop, so eventually it will have to exceed <c>aBound</c>. 
    In other cases, it is not so easy to tell.
  </p>

  <note>
    <p>This workspace is provided for your convenience. You can use this ActiveCode window to try out anything you like.</p>
    <program xml:id="ac_theWhileStatement_3_scratch" label="ac_theWhileStatement_3_scratch" interactive="activecode" language="python">
      <input>


      </input>
    </program>
  </note>

  <p><term>Check your understanding</term></p>
  <exercise label="mc_theWhileStatement_1">
    <statement><p>True or False: You can rewrite any for-loop as a while-loop.</p></statement>

    <choices>
      <choice correct="yes">
        <statement><p>True</p></statement>
        <feedback>Although the while loop uses a different syntax, it is just as powerful as a for-loop and often more flexible.</feedback>
      </choice>

      <choice>
        <statement><p>False</p></statement>
        <feedback>Often a for-loop is more natural and convenient for a task, but that same task can always be expressed using a while loop.</feedback>
      </choice>
    </choices>
  </exercise>

  <exercise label="mc_theWhileStatement_2">
    <statement>
      <p>The following code contains an infinite loop. Which is the best explanation for why the loop does not terminate?</p>
      <program language="python">
        <input>
          n = 10
          answer = 1
          while n &gt; 0:
            answer = answer + n
            n = n + 1
          print(answer)
        </input>
      </program>
    </statement>

    <choices>
      <choice correct="yes">
        <statement><p>n starts at 10 and is incremented by 1 each time through the loop, so it will always be positive</p></statement>
        <feedback>The loop will run as long as n is positive.  In this case, we can see that n will never become non-positive.</feedback>
      </choice>

      <choice>
        <statement><p>answer starts at 1 and is incremented by n each time, so it will always be positive</p></statement>
        <feedback>While it is true that answer will always be positive, answer is not considered in the loop condition.</feedback>
      </choice>

      <choice>
        <statement><p>You cannot compare n to 0 in while loop.  You must compare it to another variable.</p></statement>
        <feedback>It is perfectly valid to compare n to 0.  Though indirectly, this is what causes the infinite loop.</feedback>
      </choice>

      <choice>
        <statement><p>In the while loop body, we must set n to False, and this code does not do that.</p></statement>
        <feedback>The loop condition must become False for the loop to terminate, but n by itself is not the condition in this case.</feedback>
      </choice>
    </choices>
  </exercise>

  <exercise label="mc_theWhileStatement_3">
    <statement>
      <p>What is printed by this code?</p>
      <program language="python">
        <input>
          n = 1
          x = 2
          while n &lt; 5:
            n = n + 1
            x = x + 1
            n = n + 2
            x = x + n
          print(n, x)
        </input>
      </program>
    </statement>

    <choices>
      <choice>
        <statement><p>4 7</p></statement>
        <feedback>Setting a variable so the loop condition would be false in the middle of the loop body does not keep the variable from actually being set.</feedback>
      </choice>

      <choice>
        <statement><p>5 7</p></statement>
        <feedback>Setting a variable so the loop condition would be false in the middle of the loop body does not stop execution of statements in the rest of the loop body.</feedback>
      </choice>

      <choice correct="yes">
        <statement><p>7 15</p></statement>
        <feedback>After n becomes 5 and the test would be False, but the test does not actually come until after the end of the loop - only then stopping execution of the repetition of the loop.</feedback>
      </choice>
    </choices>
  </exercise>

</section>
