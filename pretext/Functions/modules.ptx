<?xml version="1.0"?>
<section xml:id="python-modules_modules-and-getting-help">
  <title>Modules</title>
  <!-- <video xml:id="vid_modules" youtube="GCLHuPBtLdQ" width="auto" label="modules_vid"/> -->
  <p>A <term>module</term> is a file containing Python definitions and statements intended
            for use in other Python programs. There are many Python modules that come with
            Python as part of the <term>standard library</term>. 
            Providing additional functionality through modules allows you to only use the functionality you need when you need it, and it keeps your code cleaner.
            </p>

            <p>
              Functions imported as part of a module live in their own namespace. 
              A namespace is simply a space within which all names are distinct from each other. 
              The same name can be reused in different namespaces but two objects can't have the same name within a single namespace. 
              One example of a namespace is the set of street names within a single city. Many cities have a street called "Main Street", 
              but it's very confusing if two streets in the same city have that name! 
              Another example is the folder organization of file systems. You can have a file called todo in your work folder as well as your personal folder, but you know which is which because of the folder it's in; 
              each folder has its own namespace for files. Note that human names are not part of a namespace that enforces uniqueness; that's why governments have invented unique identifiers to assign to people, like passport numbers.
            </p>
            <p>Here's an example of importing the <c>math</c> module and how we can use some the things
            that are defined inside.</p>

  <program xml:id="ac_modules_1" label="ac_modules_1" interactive="activecode" language="python">
    <input>
import math            # allows us to use the math library

print(math.factorial(10))     # prints 10!
print(math.exp(4))   		  # prints e^4

print(math.log2(1024))        # prints log2(1024)
print(math.sqrt(100))         # prints the square root of 100
        </input>
  </program>
  <p>Here we are using <c>factorial</c>, <c>exp</c>, <c>log2</c>, and <c>sqrt</c>, all of which are defined inside the <c>math</c> module.</p>
  <p>But what if no one had told us about math?  How would we know
            that it exists. How would we know what it can do for us? The answer is to ask for help and the best place to get
            help about the Python programming environment is to consult with the Python Documentation.</p>
  <p>The  <url href="http://docs.python.org/py3k/" visual="http://docs.python.org/py3k/">Python Documentation</url> site for Python version 3 (the home page is shown below) is an extremely useful reference
            for all aspects of Python.
            The site contains
            a listing of all the standard modules that are available with Python
            (see <url href="http://docs.python.org/py3k/py-modindex.html" visual="http://docs.python.org/py3k/py-modindex.html">Global Module Index</url>).
            You will also see that there is a <url href="http://docs.python.org/py3k/reference/index.html" visual="http://docs.python.org/py3k/reference/index.html">Language Reference</url>
            and a <url href="http://docs.python.org/py3k/tutorial/index.html" visual="http://docs.python.org/py3k/tutorial/index.html">Tutorial</url> (mostly aimed at people who are already familiar with another programming language), as well as
            installation instructions, how-tos, and frequently asked questions.  We encourage you to become familiar with this site
            and to use it often.</p>
  <image source="PythonModules/Figures/pythondocmedium.png" width="50%"/>
  <p>If you have not done so already, take a look at the Global Module Index.  Here you will see an alphabetical listing of all
            the modules that are available as part of the standard library.  Find the math module.</p>
  <image source="PythonModules/Figures/moduleindexmedium.png" width="50%"/>
  <p>You can see that all the math functionality that we have talked about is there.  However, there is so much more.  
    Take some time to read through and familiarize yourself with some of the other things that math can do.</p>
  


  <p>
    In order to use Python modules, you have to import them into a Python program. That happens with an import statement: the word <c>import</c>, and then the name of the module. 
    The name is case-sensitive. Roughly translated to English, an import statement says "there's some code in another file; please make its functions and variables available in this file." 
    More technically, an import statement causes all the code in another file to be executed. 
    Any variables that are bound during that execution (including functions that are defined) may then be referred in some way (to be discussed) in the current file.

By convention, all <c>import</c> commands are put at the very top of your file. They can be put elsewhere, but that can lead to some confusions, so it's best to follow the convention.

Where do these other files that you can import come from? It could be a code file that you wrote yourself, or it could be code that someone else wrote and you copied on to your computer.

For example, if you have a file <c>myprog.py</c> in directory <c>~/Desktop/mycode/</c>, and <c>myprog.py</c> contains a line of code <c>import morecode</c>, 
then the python interpreter will look for a file called <c>morecode.py</c>, excecute its code, and make its object bindings available for reference in the rest of the code in <c>myprog.py</c>.

  </p><p>Note that it is <c>import morecode</c>, not <c>import morecode.py</c>, but the other file has to be called <c>morecode.py</c>.</p>

<p>The tests you see in your problem sets are also using a Python module that's in the standard library, called <c>unittest</c>. 
  Right now, you can't see the code that causes those tests to run, because we have hidden it from you, as you progress in learning how to program, you will learn how to write your own Unit Tests for code, 
  and to do so, you will need to write an import statement at the beginning of your programs. Even before you learn how to write your own tests, you will see code for Unit Tests in your problem set files.
  </p>

  <note>

    <title>Don't overwrite standard library modules!</title>

<p>Given the order of search for external Python modules that is described in the list above, it is possible to overwrite a standard library. 
  For example, if you create a file <c>random.py</c> in the same directory where <c>myprog.py</c> lives, and then <c>myprog.py</c> invokes <c>import random</c>, 
  it will import your file rather than the standard library module. That's not usually what you want, so be careful about how you name your python files!
  </p></note>
  <subsection xml:id="python-modules_modules-syntax">
    <title></title>
    When you see imported modules in a Python program, there are a few variations that have slightly different consequences.

<ol><li><p>The most common is <c>import morecode</c>. That imports everything in morecode.py.
   To invoke a function <c>f1</c> that is defined in <c>morecode.py</c>, you would write <c>morecode.f1()</c>. 
   Note that you have to explicitly mention morecode again, to specify that you want the f1 function from the morecode namespace. 
   If you just write <c>f1()</c>, python will look for an f1 that was defined in the current file, rather than in <c>morecode.py</c>.</p></li>

<li><p>You can also give the imported module an alias (a different name, just for when you use it in your program). For example, after executing <c>import morecode as mc</c>, you would invoke <c>f1</c> as <c>mc.f1()</c>. 
  You have now given the morecode module the alias mc. Programmers often do this to make code easier to type.</p></li>

<li><p>A third possibility for importing occurs when you only want to import SOME of the functionality from a module, and you want to make those objects be part of the current module's namespace. 
  For example, you could write <c>from morecode import f1</c>. Then you could invoke f1 without referencing morecode again: <c>f1()</c>.</p></li>
</ol>
</subsection>
<note>
  <title>Note: Python modules and limitations with activecode</title>
  <p>Throughout the chapters of this book, activecode windows allow you to practice the Python that you are learning.
              We mentioned in the first chapter that programming is normally done using some type of development
              environment and that the
              activecode used here was strictly to help us learn.  It is not the way we write production programs.</p>
  <p>To that end, it is necessary to mention that many of the  modules available in standard Python
              will <term>not</term> work in the activecode environment.  In fact, only math and random have been
              completely ported at this point.  If you wish to explore any
              additional modules, you will need to also explore using a more robust development environment.</p>
</note>

    <subsection xml:id="python-modules_more-about-using-modules">
      <title>More About Using Modules</title>
  
  <p>Before we move on to exploring other modules, we should say a bit more about what modules are and how we
    typically use them.  One of the most important things to realize about modules is the fact that they are data objects, just
    like any other data in Python.  Module objects simply contain other Python elements.</p>

  <p>The first thing we need to do when we wish to use a module is perform an <c>import</c>.  In the example above, the statement
    <c>import math</c> creates a new name, <c>math</c>, and makes it refer to a `module object`.  This looks very much like
    the reference diagrams we saw earlier for simple variables.</p>

  <p>In order to use something contained in a module, we use the `dot` notation, providing the module name and the specific item joined together with a "dot".  For example, to use the <c>sqrt</c> function, we say <c>math.sqrt</c>.  You should read
this as: "In the module math, access the Python element called sqrt".</p>
    </subsection>


    <term>Check your understanding</term>
  <exercise label="mc_modules_1">
    <statement>
      <p>In Python a module is:</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>A file containing Python definitions and statements intended for use in other Python programs.</p>
        </statement>
        <feedback>
                    A module can be reused in different programs.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>A separate block of code within a program.</p>
        </statement>
        <feedback>
                    While a module is separate block of code, it is separate from a program.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>One line of code in a program.</p>
        </statement>
        <feedback>
                    The call to a feature within a module may be one line of code, but modules are usually multiple lines of code separate from the program
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>A file that contains documentation about functions in Python.</p>
        </statement>
        <feedback>
                    Each module has its own documentation, but the module itself is more than just documentation.
                </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mc_modules_2">
    <statement>
      <p>To find out information on the standard modules available with Python you should:</p>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>Go to the Python Documentation site.</p>
        </statement>
        <feedback>
                    The site contains a listing of all the standard modules that are available with Python.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>Look at the import statements of the program you are working with or writing.</p>
        </statement>
        <feedback>
                    The import statements only tell you what modules are currently being used in the program, not how to use them or what they contain.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>Ask the professor</p>
        </statement>
        <feedback>
                    While the professor knows a subset of the modules available in Python, chances are the professor will have to look up the available modules just like you would.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>Look in this textbook.</p>
        </statement>
        <feedback>
                    This book only explains a portion of the modules available.  For a full listing you should look elsewhere.
                </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mc_modules_3">
    <statement>
      <p>True / False:  All standard Python modules will work in activecode.</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>True</p>
        </statement>
        <feedback>
                    Only math, and random have been ported to work in activecode at this time.
                </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>False</p>
        </statement>
        <feedback>
                    Only math, and random have been ported to work in activecode at this time.
                </feedback>
      </choice>
    </choices>
  </exercise>
</section>
