<?xml version="1.0"?>
<exercises xml:id="functions_exercises">
  <title>Practice Zone</title>

  <exercise label="pz_functions_1">
    <statement>
      <p>Write code that will calculate the length of the hypotenuse function will be given the length of two sides of a right-angled triangle and it should return
                the .  (Hint:  <c>x ** 0.5</c> will return the square root, or use <c>sqrt</c> from the math module)</p>
    </statement>
    <program xml:id="ac_pz_functions_1" label="ac_pz_functions_1" interactive="activecode" language="python">
      <input>

def findHypot(a,b):
    # your code here

====

from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(findHypot(12.0,5.0),13.0,"Tested findHypot on inputs of 12.0 and 5.0")
        self.assertEqual(findHypot(14.0,48.0),50.0,"Tested findHypot on inputs of 14.0 and 48.0")
        self.assertEqual(findHypot(21.0,72.0),75.0,"Tested findHypot on inputs of 21.0 and 72.0")
        self.assertAlmostEqual(findHypot(1,1.73205),1.999999,2,"Tested findHypot on inputs of 1 and 1.73205")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="pz_functions_2">
    <statement>
      <p>Complete the function <c>is_odd(n)</c> so that returns <c>True</c> when <c>n</c> is odd
                and <c>False</c> otherwise.</p>
    </statement>
    <program xml:id="ac_pz_functions_2" label="ac_pz_functions_2" interactive="activecode" language="python">
      <input>

def is_odd(n):
    # your code here


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
     def testOne(self):
         self.assertEqual(is_odd(10),False,"Tested is_odd on input of 10")
         self.assertEqual(is_odd(5),True,"Tested is_odd on input of 5")
         self.assertEqual(is_odd(1),True,"Tested is_odd on input of 1")
         self.assertEqual(is_odd(0),False,"Tested is_odd on input of 0")

myTests().main()
        </input>
    </program>
  </exercise>

  <exercise label="pz_functions_3">
    <statement>
      <p>Modify <c>is_odd</c> so that it uses a call to the function <c>is_even</c>, which returns true if its argument is even number and false otherwise, to determine if its
                        argument is an odd integer.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="ac_pz_functions_3" label="ac_pz_functions_3">
      <input>

def is_odd(n):
    # your code here

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
     def testOne(self):
         self.assertEqual(is_odd(10),False,"Tested is_odd on input of 10")
         self.assertEqual(is_odd(5),True,"Tested is_odd on input of 5")
         self.assertEqual(is_odd(1),True,"Tested is_odd on input of 1")
         self.assertEqual(is_odd(0),False,"Tested is_odd on input of 0")

myTests().main()
        </input>
    </program>
    <solution>
      <program xml:id="q9_answer" language="python">
        <input>
from test import testEqual

def is_even(n):
    if n % 2 == 0:
        return True
    else:
        return False

def is_odd(n):
    if is_even(n):
        return False
    else:
        return True

testEqual(is_odd(10), False)
testEqual(is_odd(5), True)
testEqual(is_odd(1), True)
testEqual(is_odd(0), False)
        </input>
      </program>
    </solution>
  </exercise>


  <exercise label="pz_functions_4">
    <statement>
      <p>Write a function <c>is_rightangled</c> which, given the length of three sides of a triangle,
                will determine whether the triangle is right-angled.  Assume that the third argument to the
                function is always the longest side.  It will return <c>True</c> if the triangle
                is right-angled, or <c>False</c> otherwise.</p>
      <p>Hint: floating point arithmetic is not always exactly accurate,
                so it is not safe to test floating point numbers for equality.
                If a good programmer wants to know whether
                <c>x</c> is equal or close enough to <c>y</c>, they would probably code it up as</p>
      <program language="python">
        <input>
if  abs(x - y) &lt; 0.001:      # if x is approximately equal to y
    ...
</input>
      </program>
    </statement>
    <program xml:id="ac_pz_functions_4" label="ac_pz_functions_4" interactive="activecode" language="python">
      <input>
def is_rightangled(a, b, c):
    # your code here

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(is_rightangled(1.5,2.0,2.5),True,"Tested is_rightangled on inputs of 1.5, 2.0 and 2.5")
        self.assertEqual(is_rightangled(4.0,8.0,16.0),False,"Tested is_rightangled on inputs of 4.0, 8.0 and 16.0")
        self.assertEqual(is_rightangled(4.1,8.2,9.1678787077),True,"Tested is_rightangled on inputs of 4.1, 8.2 and 9.1678787077")
        self.assertEqual(is_rightangled(4.1,8.2,9.16787),True,"Tested is_rightangled on inputs of 4.1, 8.2, and 9.16787")
        self.assertEqual(is_rightangled(4.1,8.2,9.168),False,"Tested is_rightangled on inputs of 4.1, 8.2 and 9.168")
        self.assertEqual(is_rightangled(0.5,0.4,0.64031),True,"Tested is_rightangled on inputs of 0.5, 0.4 and 0.64031")

myTests().main()
        </input>
    </program>
  </exercise>
  <exercise label="pz_functions_5">
    <statement>
      <p>Extend the above program so that the sides can be given to the function in any order.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="ac_pz_functions_5" label="ac_pz_functions_5">
      <input>

def is_rightangled(a, b, c):
    # your code here


====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(is_rightangled(1.5,2.5,2.0),True,"Tested is_rightangled on inputs of 1.5, 2.5 and 2.0")
        self.assertEqual(is_rightangled(16.0,4.0,8.0),False,"Tested is_rightangled on inputs of 16.0, 4.0 and 8.0")
        self.assertEqual(is_rightangled(4.1,8.2,9.1678787077),True,"Tested is_rightangled on inputs of 4.1, 8.2 and 9.1678787077")
        self.assertEqual(is_rightangled(4.1,9.16787,8.2),True,"Tested is_rightangled on inputs of 4.1, 9.16787 and 8.2")
        self.assertEqual(is_rightangled(4.1,8.2,9.168),False,"Tested is_rightangled on inputs of 4.1, 8.2 and 9.168")
        self.assertEqual(is_rightangled(0.5,0.64031,0.4),True,"Tested is_rightangled on inputs of 0.5, 0.64031 and 0.4")

myTests().main()
        </input>
    </program>
    <solution>
      <program xml:id="q11_answer" language="python">
        <input>
from test import testEqual

def is_rightangled(a, b, c):
    is_rightangled = False

    if a &gt; b and a &gt; c:
        is_rightangled = abs(b**2 + c**2 - a**2) &lt; 0.001
    elif b &gt; a and b &gt; c:
        is_rightangled = abs(a**2 + c**2 - b**2) &lt; 0.001
    else:
        is_rightangled = abs(a**2 + b**2 - c**2) &lt; 0.001
    return is_rightangled

testEqual(is_rightangled(1.5, 2.0, 2.5), True)
testEqual(is_rightangled(4.0, 8.0, 16.0), False)
testEqual(is_rightangled(4.1, 8.2, 9.1678787077), True)
testEqual(is_rightangled(4.1, 8.2, 9.16787), True)
testEqual(is_rightangled(4.1, 8.2, 9.168), False)
testEqual(is_rightangled(0.5, 0.4, 0.64031), True)
        </input>
      </program>
    </solution>
  </exercise>
  <exercise label="pz_functions_6">
    <statement>
      <p>3 criteria must be taken into account to identify leap years:</p>
      <p>The year is evenly divisible by 4;</p>
      <p>If the year can be evenly divided by 100, it is NOT a leap year, unless;</p>
      <p>The year is also evenly divisible by 400. Then it is a leap year.</p>
      <p>Write a function that takes a year as a parameter and returns <c>True</c> if the year is a leap year, <c>False</c> otherwise.</p>
    </statement>
    <program xml:id="ac_pz_functions_6" label="ac_pz_functions_6" interactive="activecode" language="python">
      <input>
def isLeap(year):
    # your code here

====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):
    def testOne(self):
        self.assertEqual(isLeap(1944),True,"Tested isLeap on an input of 1944")
        self.assertEqual(isLeap(2011),False,"Tested isLeap on an input of 2011")
        self.assertEqual(isLeap(1986),False,"Tested isLeap on an input of 1986")
        self.assertEqual(isLeap(1800),False,"Tested isLeap on an input of 1800")
        self.assertEqual(isLeap(1900),False,"Tested isLeap on an input of 1900")
        self.assertEqual(isLeap(2000),True,"Tested isLeap on an input of 2000")
        self.assertEqual(isLeap(2056),True,"Tested isLeap on an input of 2056")

myTests().main()
        </input>
    </program>
  </exercise>

  <exercise label="pz_functions_7">
    <statement>
      <p>Write a fruitful function <c>sumTo(n)</c> that returns the sum of all integer numbers up to and
                        including <title_reference>n</title_reference>.   So <c>sumTo(10)</c> would be <c>1+2+3...+10</c> which would return the value 55.  Use the
                        equation  (n * (n + 1)) / 2.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="ac_pz_functions_7" label="ac_pz_functions_7">
      <input>

def sumTo(n):
    # your code here ====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertAlmostEqual(sumTo(15),120.0,0,"Tested sumTo on input 15")
        self.assertAlmostEqual(sumTo(0),0.0,0,"Tested sumTo on input 0")
        self.assertAlmostEqual(sumTo(25),325.0,0,"Tested sumTo on input 25")
        self.assertAlmostEqual(sumTo(7),28.0,0,"Tested sumTo on input 7")

myTests().main()
                            </input>
    </program>
    <solution>
      <program xml:id="func_q1_answer" language="python">
        <input>
from test import testEqual

def sumTo(n):
    result = (n * (n + 1)) / 2
    return result

# Now lets see how well this works
t = sumTo(0)
print("The sum from 1 to 0 is",t)
t = sumTo(10)
print("The sum from 1 to 10 is",t)
t = sumTo(5)
print("The sum from 1 to 5 is",t)
                        </input>
      </program>
    </solution>
  </exercise>
  <exercise label="pz_functions_8">
    <statement>
      <p>Write a function <title_reference>areaOfCircle(r)</title_reference> which returns the area of a circle of radius <title_reference>r</title_reference>.  Make sure you use the math module in your solution.</p>
    </statement>
    <program xml:id="ac_pz_functions_8" label="ac_pz_functions_8" interactive="activecode" language="python">
      <input>

def areaOfCircle(r):
    # your code here ====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertAlmostEqual(areaOfCircle(5.0),78.53981633974483,5,"Tested input: areaOfCircle(5.0)")
        self.assertEqual(areaOfCircle(5.0),78.53981633974483,"Tested input: areaOfCirlce(5.0)")
        self.assertEqual(areaOfCircle(0),0.0,"Tested input: areaOfCirlce(0)")
        self.assertAlmostEqual(areaOfCircle(31415.926535897932),3100627668.0299816,5,"Tested input: areaOfCirlce(31415.926535897932)")


myTests().main()
                    </input>
    </program>
  </exercise>
  <exercise label="pz_functions_9">
    <statement>
      <p>Rewrite the function <c>sumTo(n)</c> that returns the sum of all integer numbers up to and
                        including <title_reference>n</title_reference>.   This time use the accumulator pattern.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="ac_pz_functions_9" label="ac_pz_functions_9">
      <input>

def sumTo(n):
    # your code here ====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(sumTo(15),120,"Tested sumTo on input 15")
        self.assertEqual(sumTo(0),0,"Tested sumTo on input 0")
        self.assertEqual(sumTo(25),325,"Tested sumTo on input 25")
        self.assertEqual(sumTo(7),28,"Tested sumTo on input 7")

myTests().main()
                            </input>
    </program>
    <solution>
      <program xml:id="func_q3_answer" language="python">
        <input>
def sumTo(n):
    sum = 0
    for i in range(1,n+1):
        sum = sum + i
    return sum

# Now lets see how well this works
t = sumTo(0)
print("The sum from 1 to 0 is",t)
t = sumTo(10)
print("The sum from 1 to 10 is",t)
t = sumTo(5)
print("The sum from 1 to 5 is",t)
                        </input>
      </program>
    </solution>
  </exercise>
  <exercise label="pz_functions_10">
    <statement>
      <p>Write a function called <c>myPi</c> that will return an approximation of PI (3.14159&#x2026;).  Use the <url href="http://en.wikipedia.org/wiki/Leibniz_formula_for_%CF%80" visual="http://en.wikipedia.org/wiki/Leibniz_formula_for_%CF%80">Leibniz</url>
                                 approximation.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="ac_pz_functions_10" label="ac_pz_functions_10">
      <input>

 def myPi(iters):
     # Calculate an approximation of PI using the Leibniz
     # approximation with iters number of iterations

     # your code here
                            </input>
    </program>
    <solution>
      <program xml:id="func_q4_answer" language="python">
        <input>
def myPi(iters):
    ''' Calculate an approximation of PI using the Leibniz
    approximation with iters number of iterations '''
    pi = 0
    sign = 1
    denominator = 1
    for i in range(iters):
        pi = pi + (sign/denominator)
        sign = sign * -1  # alternate positive and negative
        denominator = denominator + 2

    pi = pi * 4.0
    return pi

pi_approx = myPi(10000)
print(pi_approx)
                        </input>
      </program>
    </solution>
  </exercise>
  <exercise label="pz_functions_11">
    <statement>
      <p>Write a function called <title_reference>myPi</title_reference> that will return an approximation of PI (3.14159&#x2026;).  Use the <url href="http://en.wikipedia.org/wiki/Madhava_of_Sangamagrama" visual="http://en.wikipedia.org/wiki/Madhava_of_Sangamagrama">Madhava</url>
                         approximation.</p>
    </statement>
    <program xml:id="ac_pz_functions_11" label="ac_pz_functions_11" interactive="activecode" language="python">
      <input>

def myPi(iters):
    # Calculate an approximation of PI using the Madhava
    # approximation with iters number of iterations

    #your code here
                    </input>
    </program>
  </exercise>
  <exercise label="pz_functions_12">
    <statement>
      <p>Use the random module and a <c>for</c> statement to print 10 random numbers.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="ac_pz_functions_12" label="ac_pz_functions_12">
      <input>

        </input>
    </program>
    <solution>
      <program xml:id="mod_q1_answer" language="python">
        <input>
import random

howmany = 10
for counter in range(howmany):
    arandom = random.random()
    print(arandom)
        </input>
      </program>
    </solution>
  </exercise>
  <exercise label="pz_functions_13">
    <statement>
      <p>Repeat the above exercise but this time print 10 random numbers between 25 and 35, inclusive.</p>
    </statement>
    <program xml:id="ac_pz_functions_13" label="ac_pz_functions_13" interactive="activecode" language="python">
      <input>

        </input>
    </program>
  </exercise>
  <exercise label="pz_functions_14">
    <statement>
      <p>The <term>Pythagorean Theorem</term> tells us that the length of the hypotenuse of a right triangle is related to the lengths of the other two sides.  Look through the <c>math</c> module and see if you can find a function that will compute this relationship for you.  Once you find it, write a short program to try it out.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="ac_pz_functions_14" label="ac_pz_functions_14">
      <input>

        </input>
    </program>
    <solution>
      <program xml:id="mod_q3_answer" language="python">
        <input>
import math

side1 = 3
side2 = 4
hypotenuse = math.hypot(side1,side2)
print(hypotenuse)
        </input>
      </program>
    </solution>
  </exercise>
  <exercise label="pz_functions_15">
    <statement>
      <p>Search on the internet for a way to calculate an approximation for <term>pi</term>.  There are many that use simple arithmetic.  Write a program to compute the approximation and then print that value as well as the value of <c>math.pi</c> from the math module.</p>
    </statement>
    <program xml:id="ac_pz_functions_15" label="ac_pz_functions_15" interactive="activecode" language="python">
      <input>

        </input>
    </program>
  </exercise>
</exercises>
