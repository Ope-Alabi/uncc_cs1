<?xml version="1.0"?>
<exercises xml:id="functions_exercises">
  <title>Practice Zone</title>
  <exercise label="ex_5_1">
    <statement>
      <p>Write a fruitful function <c>sumTo(n)</c> that returns the sum of all integer numbers up to and
                        including <title_reference>n</title_reference>.   So <c>sumTo(10)</c> would be <c>1+2+3...+10</c> which would return the value 55.  Use the
                        equation  (n * (n + 1)) / 2.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="ex_5_1_editor">
      <input>

def sumTo(n):
    # your code here ====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertAlmostEqual(sumTo(15),120.0,0,"Tested sumTo on input 15")
        self.assertAlmostEqual(sumTo(0),0.0,0,"Tested sumTo on input 0")
        self.assertAlmostEqual(sumTo(25),325.0,0,"Tested sumTo on input 25")
        self.assertAlmostEqual(sumTo(7),28.0,0,"Tested sumTo on input 7")

myTests().main()
                            </input>
    </program>
    <solution>
      <program xml:id="func_q1_answer" language="python">
        <input>
from test import testEqual

def sumTo(n):
    result = (n * (n + 1)) / 2
    return result

# Now lets see how well this works
t = sumTo(0)
print("The sum from 1 to 0 is",t)
t = sumTo(10)
print("The sum from 1 to 10 is",t)
t = sumTo(5)
print("The sum from 1 to 5 is",t)
                        </input>
      </program>
    </solution>
  </exercise>
  <exercise label="ex_5_2">
    <statement>
      <p>Write a function <title_reference>areaOfCircle(r)</title_reference> which returns the area of a circle of radius <title_reference>r</title_reference>.  Make sure you use the math module in your solution.</p>
    </statement>
    <program xml:id="ex_5_2_editor" interactive="activecode" language="python">
      <input>

def areaOfCircle(r):
    # your code here ====
from unittest.gui import TestCaseGui

class myTests(TestCaseGui):

    def testOne(self):
        self.assertAlmostEqual(areaOfCircle(5.0),78.53981633974483,5,"Tested input: areaOfCircle(5.0)")
        self.assertEqual(areaOfCircle(5.0),78.53981633974483,"Tested input: areaOfCirlce(5.0)")
        self.assertEqual(areaOfCircle(0),0.0,"Tested input: areaOfCirlce(0)")
        self.assertAlmostEqual(areaOfCircle(31415.926535897932),3100627668.0299816,5,"Tested input: areaOfCirlce(31415.926535897932)")


myTests().main()
                    </input>
    </program>
  </exercise>
  <exercise label="ex_5_3">
    <statement>
      <p>Rewrite the function <c>sumTo(n)</c> that returns the sum of all integer numbers up to and
                        including <title_reference>n</title_reference>.   This time use the accumulator pattern.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="ex_5_3_editor">
      <input>

def sumTo(n):
    # your code here ====
from unittest.gui import TestCaseGui
class myTests(TestCaseGui):

    def testOne(self):
        self.assertEqual(sumTo(15),120,"Tested sumTo on input 15")
        self.assertEqual(sumTo(0),0,"Tested sumTo on input 0")
        self.assertEqual(sumTo(25),325,"Tested sumTo on input 25")
        self.assertEqual(sumTo(7),28,"Tested sumTo on input 7")

myTests().main()
                            </input>
    </program>
    <solution>
      <program xml:id="func_q3_answer" language="python">
        <input>
def sumTo(n):
    sum = 0
    for i in range(1,n+1):
        sum = sum + i
    return sum

# Now lets see how well this works
t = sumTo(0)
print("The sum from 1 to 0 is",t)
t = sumTo(10)
print("The sum from 1 to 10 is",t)
t = sumTo(5)
print("The sum from 1 to 5 is",t)
                        </input>
      </program>
    </solution>
  </exercise>
  <exercise label="ex_5_4">
    <statement>
      <p>Write a function called <c>myPi</c> that will return an approximation of PI (3.14159&#x2026;).  Use the <url href="http://en.wikipedia.org/wiki/Leibniz_formula_for_%CF%80" visual="http://en.wikipedia.org/wiki/Leibniz_formula_for_%CF%80">Leibniz</url>
                                 approximation.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="ex_5_4_editor">
      <input>

 def myPi(iters):
     # Calculate an approximation of PI using the Leibniz
     # approximation with iters number of iterations

     # your code here
                            </input>
    </program>
    <solution>
      <program xml:id="func_q4_answer" language="python">
        <input>
def myPi(iters):
    ''' Calculate an approximation of PI using the Leibniz
    approximation with iters number of iterations '''
    pi = 0
    sign = 1
    denominator = 1
    for i in range(iters):
        pi = pi + (sign/denominator)
        sign = sign * -1  # alternate positive and negative
        denominator = denominator + 2

    pi = pi * 4.0
    return pi

pi_approx = myPi(10000)
print(pi_approx)
                        </input>
      </program>
    </solution>
  </exercise>
  <exercise label="ex_5_5">
    <statement>
      <p>Write a function called <title_reference>myPi</title_reference> that will return an approximation of PI (3.14159&#x2026;).  Use the <url href="http://en.wikipedia.org/wiki/Madhava_of_Sangamagrama" visual="http://en.wikipedia.org/wiki/Madhava_of_Sangamagrama">Madhava</url>
                         approximation.</p>
    </statement>
    <program xml:id="ex_5_5_editor" interactive="activecode" language="python">
      <input>

def myPi(iters):
    # Calculate an approximation of PI using the Madhava
    # approximation with iters number of iterations

    #your code here
                    </input>
    </program>
  </exercise>
  <exercise label="ex_mod_1">
    <statement>
      <p>Use a <c>for</c> statement to print 10 random numbers.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="ex_mod_1_editor">
      <input>

        </input>
    </program>
    <solution>
      <program xml:id="mod_q1_answer" language="python">
        <input>
import random

howmany = 10
for counter in range(howmany):
    arandom = random.random()
    print(arandom)
        </input>
      </program>
    </solution>
  </exercise>
  <exercise label="ex_mod_2">
    <statement>
      <p>Repeat the above exercise but this time print 10 random numbers between 25 and 35, inclusive.</p>
    </statement>
    <program xml:id="ex_mod_2_editor" interactive="activecode" language="python">
      <input>

        </input>
    </program>
  </exercise>
  <exercise label="ex_mod_3">
    <statement>
      <p>The <term>Pythagorean Theorem</term> tells us that the length of the hypotenuse of a right triangle is related to the lengths of the other two sides.  Look through the <c>math</c> module and see if you can find a function that will compute this relationship for you.  Once you find it, write a short program to try it out.</p>
    </statement>
    <program interactive="activecode" language="python" xml:id="ex_mod_3_editor">
      <input>

        </input>
    </program>
    <solution>
      <program xml:id="mod_q3_answer" language="python">
        <input>
import math

side1 = 3
side2 = 4
hypotenuse = math.hypot(side1,side2)
print(hypotenuse)
        </input>
      </program>
    </solution>
  </exercise>
  <exercise label="ex_mod_4">
    <statement>
      <p>Search on the internet for a way to calculate an approximation for <term>pi</term>.  There are many that use simple arithmetic.  Write a program to compute the approximation and then print that value as well as the value of <c>math.pi</c> from the math module.</p>
    </statement>
    <program xml:id="ex_mod_4_editor" interactive="activecode" language="python">
      <input>

        </input>
    </program>
  </exercise>
</exercises>
