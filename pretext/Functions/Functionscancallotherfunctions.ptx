<?xml version="1.0"?>
<section xml:id="functions_functions-can-call-other-functions">
  <title>Functions can Call Other Functions</title>
  <p>It is important to understand that each of the functions we write can be used
            and called from other functions we write.  This is one of the most important
            ways that computer scientists take a large problem and break it down into a
            group of smaller problems. This process of breaking a problem into smaller
            subproblems is called <term>functional decomposition</term>.
  </p>
  <p>Here's a simple example of functional decomposition using two functions. The
            first function called <c>square</c> simply computes the square of a given number.
            The second function called <c>sum_of_squares</c> makes use of square to compute
            the sum of three numbers that have been squared.</p>
  <program xml:id="ch8_sec5_p1" interactive="activecode" language="python">
    <input>
          def square(x):
              y = x * x
              return y
          
          def sum_of_squares(x, y, z):
              a = square(x)
              b = square(y)
              c = square(z)
          
              return a + b + c
          
          a = -5
          b = 2
          c = 10
          result = sum_of_squares(a, b, c)
          print(result)
    </input>
  </program>
  <p>Even though this is a pretty simple idea, in practice this example
            illustrates many very important Python concepts, including local and global
            variables along with parameter passing.  Note that when you step through this
            example, codelens bolds line 1 and line 5 as the functions are defined.  The
            body of square is not executed until it is called from the <c>sum_of_squares</c>
            function for the first time on line 6.  Also notice that when <c>square</c> is
            called there are two groups of local variables, one for <c>square</c> and one
            for <c>sum_of_squares</c>.  As you step through you will notice that <c>x</c>, and <c>y</c> are local variables in both functions and may even have
            different values.  This illustrates that even though they are named the same,
            they are in fact, very different.</p>
  
  <p>So far, it may not be clear why it is worth the trouble to create all of these
            new functions. Actually, there are a lot of reasons, but this example
            demonstrates two:</p>
  <p>
    <ol marker="1">
      <li>
        <p>Creating a new function gives you an opportunity to name a group of
                    statements. Functions can simplify a program by hiding a complex computation
                    behind a single command. The function (including its name) can capture your
                    mental chunking, or <em>abstraction</em>, of the problem.</p>
      </li>
      <li>
        <p>Creating a new function can make a program smaller by eliminating repetitive
                    code.</p>
      </li>
      <li>
        <p>Sometimes you can write functions that allow you to solve a specific
                    problem using a more general solution.</p>
      </li>
    </ol>
  </p>
</section>
