<?xml version="1.0"?>
<section xml:id="functions_using-a-main-function">
  <title>Using a Main Function</title>
  <p>Using functions is a good idea.  It helps us to modularize our code by breaking a program
            into logical parts where each part is responsible for a specific task.  For example, in one of our recent programs there
            was a function called <c>square</c> that was responsible for calculating the square of a number.
            After the function definition we defined a variable, called the function, and printed its results. Here is that original program.</p>
  <program language="python">
    <input>
def square(x):
  y = x * x
  return y

toSquare = 10
squareResult = square(toSquare)
print("The result of", toSquare, "squared is", squareResult)
</input>
  </program>
  <p>If you look closely at the structure of this program, we first define the function <c>square</c>.  At this point, we could have defined as many functions as were needed. </p>

  <p>The final three statements perform the main processing that the program will do.  Notice that much of the detail has been pushed inside the <c>square</c> function.  
 However, there are still these three lines of code that are needed to get things done.</p>

  <p>In many programming languages (e.g. Java and C++), it is not possible to simply have statements sitting alone like this at the bottom of the program.  
 They are required to be part of a special function that is automatically invoked by the operating system when the program is executed.  
 This special function is called <b>main</b>.  Although this is not required by the Python programming language, it is actually a good idea that we 
 can incorporate into the logical structure of our program.  In other words, these three lines are logically related to one another in that they provide the 
 main tasks that the program will perform.  Since functions are designed to allow us to break up a program into logical pieces, it makes sense to call this 
 piece <c>main</c>.</p>

  <p>The following activecode shows this idea.  In line 11 we have defined a new function called <c>main</c> that doesn't need any parameters.  The five lines of main processing are now placed inside this function.  Finally, in order to execute that main processing code, we need to invoke the <c>main</c> function (line 20).  When you push run, you will see that the program works the same as it did before.</p>
  <program xml:id="ch8_sec8_p1" interactive="activecode" language="python">
    <input>
def square(x):
    y = x * x
    return y


def main():                      # Define the main function
    toSquare = 10
    squareResult = square(toSquare)
    print("The result of", toSquare, "squared is", squareResult)

main()                           # Invoke the main function
    </input>
  </program>
  <p>Now our program structure is as follows.  First, import any modules that will be required (you'll read about those in the next chapter).  Second, define any functions 
    that will be needed.  Third, define a <c>main</c> function that will get the process started.  And finally, invoke the main function 
    (which will in turn call the other functions as needed).</p>
  <note>
    <p>In Python there is nothing special about the name <c>main</c>.  We could have called this function anything we wanted.  We chose <c>main</c> just to be consistent with some of the other languages.</p>
  </note>
  <p>
    <term>Advanced Topic</term>
  </p>
  <p>Before the Python interpreter executes your program, it defines a few special variables.  One of those variables is called <c>__name__</c> and it is automatically set to the string value <c>"__main__"</c> when the program is being executed by itself in a standalone fashion.  On the other hand, if the program is being imported by another program, then the <c>__name__</c> variable is set to the name of that module.  This means that we can know whether the program is being run by itself or whether it is being used by another program and based on that observation, we may or may not choose to execute some of the code that we have written.</p>
  <p>For example, assume that we have written a collection of functions to do some simple math.  We can include a <c>main</c> function to invoke these math functions.  It is much more likely, however, that these functions will be imported by another program for some other purpose.  In that case, we would not want to execute our main function.</p>
  <p>The activecode below defines two simple functions and a main.</p>
  <program xml:id="ch8_sec8_p2" interactive="activecode" language="python">
    <input>
def squareit(n):
    return n * n

def cubeit(n):
    return n*n*n

def main():
    anum = int(input("Please enter a number"))
    print(squareit(anum))
    print(cubeit(anum))

if __name__ == "__main__":
    main()
        </input>
  </program>
  <p>Line 12 uses an <c>if</c> statement to ask about the value of the <c>__name__</c> variable.  If the value is <c>"__main__"</c>, then the <c>main</c> function will be called.  Otherwise, it can be assumed that the program is being imported into another program and we do not want to call <c>main</c> because that program will invoke the functions as needed.  This ability to conditionally execute our main function can be extremely useful when we are writing code that will potentially be used by others.  It allows us to include functionality that the user of the code will not need, most often as part of a testing process to be sure that the functions are working correctly.</p>
</section>
