<?xml version="1.0"?>
<section xml:id="slice-operator">
    <title>The Slice Operator</title>
    <p>A substring of a string is called a <term>slice</term>. Selecting a slice is similar to selecting a character:</p>

    <program xml:id="ac_sliceOperator_1" label="ac_sliceOperator_1" interactive="activecode" language="python">
        <input>
            singers = "Peter, Paul, and Mary"
            print(singers[0:5])
            print(singers[7:11])
            print(singers[17:21])
            
        </input>
    </program>

    <p>
        The <title_reference>slice</title_reference> operator <c>[n:m]</c> returns the part of the string from the n'th character to the m'th character, including the first but excluding the last. In other words,  start with the character at index n and go up to but do not include the character at index m.
    </p>

    <p>
        If you omit the first index (before the colon), the slice starts at the beginning of the string. If you omit the second index, the slice goes to the end of the string.
    </p>

    <p>
        There is no Index Out Of Range exception for a slice. A slice is forgiving and shifts any offending index to something legal.
    </p>

    <program xml:id="ac_sliceOperator_2" label="ac_sliceOperator_2" interactive="activecode" language="python">
        <input>
            fruit = "banana"
            print(fruit[:3])
            print(fruit[3:])
            print(fruit[3:-10])
            print(fruit[3:99])

        </input>
    </program>

    <p>What do you think <c>fruit[:]</c> means?</p>

    <subsection xml:id="subsec-list_slices">
        <title>List Slices</title>

        <p>
            The slice operation we saw with strings also work on lists.  Remember that the first index is the starting point for the slice and the second number is one index past the end of the slice (up to but not including that element).  Recall also that if you omit the first index (before the colon), the slice starts at the beginning of the sequence. If you omit the second index, the slice goes to the end of the sequence.
        </p>
        <program xml:id="ac_sliceOperator_3" label="ac_sliceOperator_3" interactive="activecode" language="python">
            <input>
            a_list = ['a', 'b', 'c', 'd', 'e', 'f']
            print(a_list[1:3])
            print(a_list[:4])
            print(a_list[3:])
            print(a_list[:])

            </input>
        </program>
    </subsection>

    <p>
        <term>Check your understanding</term>
    </p>

    <exercise label="mc_sliceOperator_1">
        <statement>
            <p>What is printed by the following statements?</p>
            <program language="python">
                <input>
                    s = "python rocks"
                    print(s[3:8])

                </input>
            </program>
        </statement>
        <choices>
            <choice>
                <statement>
                    <p>python</p>
                </statement>
                <feedback>
                    That would be s[0:6].
                </feedback>
            </choice>
            <choice>
                <statement>
                    <p>rocks</p>
                </statement>
                <feedback>
                    That would be s[7:].
                </feedback>
            </choice>
            <choice correct="yes">
                <statement>
                    <p>hon r</p>
                </statement>
                <feedback>
                    Yes, start with the character at index 3 and go up to but not include the character at index 8.
                </feedback>
            </choice>
            <choice>
                <statement>
                    <p>Error, you cannot have two numbers inside the [ ].</p>
                </statement>
                <feedback>
                    This is called slicing, not indexing.  It requires a start and an end.
                </feedback>
            </choice>
        </choices>
    </exercise>

    <exercise label="mc_sliceOperator_2">
        <statement>
            <p>What is printed by the following statements?</p>
            <program language="python">
                <input>
                    s = "python rocks"
                    print(s[7:11] * 3)

                </input>
            </program>
        </statement>
        <choices>
            <choice correct="yes">
                <statement>
                    <p>rockrockrock</p>
                </statement>
                <feedback>
                    Yes, rock starts at 7 and goes through 10.  Repeat it 3 times.
                </feedback>
            </choice>
            <choice>
                <statement>
                    <p>rock rock rock</p>
                </statement>
                <feedback>
                    Repetition does not add a space.
                </feedback>
            </choice>
            <choice>
                <statement>
                    <p>rocksrocksrocks</p>
                </statement>
                <feedback>
                    Slicing will not include the character at index 11.  Just up to it (10 in this case).
                </feedback>
            </choice>
            <choice>
                <statement>
                    <p>Error, you cannot use repetition with slicing.</p>
                </statement>
                <feedback>
                    The slice will happen first, then the repetition.  So it is ok.
                </feedback>
            </choice>
        </choices>
    </exercise>

    <exercise label="mc_sliceOperator_3">
        <statement>
            <p>What is printed by the following statements?</p>
            <program language="python">
                <input>
                    alist = [3, 67, "cat", [56, 57, "dog"], [ ], 3.14, False]
                    print(alist[4:])

                </input>
            </program>
        </statement>
        <choices>
            <choice correct="yes">
                <statement>
                    <p>[ [ ], 3.14, False]</p>
                </statement>
                <feedback>
                    Yes, the slice starts at index 4 and goes up to and including the last item.
                </feedback>
            </choice>
                <choice>
                <statement>
                    <p>[ [ ], 3.14]</p>
                </statement>
                <feedback>
                    By leaving out the upper bound on the slice, we go up to and including the last item.
                </feedback>
            </choice>
            <choice>
                <statement>
                    <p>[ [56, 57, "dog"], [ ], 3.14, False]</p>
                </statement>
                <feedback>
                    Index values start at 0.
                </feedback>
            </choice>
        </choices>
    </exercise>

    <exercise label="mc_sliceOperator_4">
        <statement>
            <p>What is printed by the following statements?</p>
            <program language="python">
                <input>
                    L = [0.34, '6', 'SI106', 'Python', -2]
                    print(len(L[1:-1]))

                </input>
            </program>
        </statement>
        <choices>
            <choice>
                <statement>
                    <p>2</p>
                </statement>
                <feedback>
                    The list begins with the second item of L and includes everything up to but not including the last item.
                </feedback>
            </choice>
                <choice correct="yes">
                <statement>
                    <p>3</p>
                </statement>
                <feedback>
                    Yes, there are 3 items in this list.
                </feedback>
            </choice>
            <choice>
                <statement>
                    <p>4</p>
                </statement>
                <feedback>
                    The list begins with the second item of L and includes everything up to but not including the last item.
                </feedback>
            </choice>
            <choice>
                <statement>
                    <p>5</p>
                </statement>
                <feedback>
                    The list begins with the second item of L and includes everything up to but not including the last item.
                </feedback>
            </choice>
        </choices>
    </exercise>

    <program xml:id="ac_sliceOperator_4" label="ac_sliceOperator_4" interactive="activecode" language="python">
        <p>
            Create a new list using the 9th through 12th elements (four items in all) of <code>new_lst</code> and assign it to the variable <code>sub_lst</code>.
        </p>
        <input>
            lst = ["hi", "morning", "dog", "506", "caterpillar", "balloons", 106, "yo-yo", "python", "moon", "water", "sleepy", "daffy", 45, "donald", "whiteboard", "glasses", "markers", "couches", "butterfly", "100", "magazine", "door", "picture", "window", ["Olympics", "handle"], "chair", "pages", "readings", "burger", "juggle", "craft", ["store", "poster", "board"], "laptop", "computer", "plates", "hotdog", "salad", "backpack", "zipper", "ring", "watch", "finger", "bags", "boxes", "pods", "peas", "apples", "horse", "guinea pig", "bowl", "EECS"]

        </input>
    </program>
</section>