<?xml version="1.0"?>
<section xml:id="files_finding-a-file-on-your-disk">
  <title>Finding a File on your Filesystem</title>
  <p>In the examples we have provided, and in the simulated file system that we've built for this online textbook, all files sit in a single directory, and it's the same directory where the Python program is stored. Thus, we can just write <c>open('myfile.txt', 'r')</c>.</p>
  
  <p>If you have installed Python on your local computer and you are trying to get file reading and writing operations to work, there's a little more that you may need to understand. Computer operating systems (like Windows and the Mac OS) organize files into a hierarchy of folders, with some folders containing other folders.</p>
  
  <p>
    <image source="Files/Figures/ExampleFileHierarchy.png" width="50%"/>
  </p>

  <p>If your file and your Python program are in the same directory you can simply use the filename. For example, with the file hierarchy in the diagram, the file myPythonProgram.py could contain the code <c>open('data1.txt', 'r')</c>.</p>

  <p>If your file and your Python program are in different directories, however, then you need to specify a <term>path</term>. You can think of the filename as the short name for a file, and the path as the full name. Typically, you will specify a relative file path, which says where to find the file to open, relative to the directory where the code is running from. For example, the file <em>myPythonProgram.py</em> could contain the code <c>open('../myData/data2.txt', 'r')</c>. The <c>../</c> means to go up one level in the directory structure, to the containing folder (allProjects); <c>myData/</c> says to descend into the myData subfolder.</p>

  <p>There is also an option to use an absolute file path. For example, suppose the file structure in the figure is stored on a computer in the user's home directory, <em>/Users/joebob01/myFiles</em>. Then code in any Python program running from any file folder could open data2.txt via <c>open('/Users/joebob01/myFiles/allProjects/myData/data2.txt', 'r')</c>. You can tell an absolute file path because it begins with a /. If you will ever move your programs and data to another computer (e.g., to share them with someone else), it will be much more convenient if your use relative file paths rather than absolute. That way, if you preserve the folder structure when moving everything, you won't need to change your code. If you use absolute paths, then the person you are sharing with probably not have the same home directory name, <em>/Users/joebob01/</em>. Note that Python pathnames follow the UNIX conventions (Mac OS is a UNIX variant), rather than the Windows file pathnames that use : and \. The Python interpreter will translate to Windows pathnames when running on a Windows machine; you should be able to share your Python program between a Windows machine and a MAC without having to rewrite the file open commands.</p>

  <note>For security reasons, our code running in your browser doesn't read or write files to your computer's file system. Later, when you run Python natively on your own computer, you will be able to truly read files, using path names as suggested above. To get you started, we have faked it by providing a few files that you can read as if they were on your hard disk. In this chapter, we simulate the existence of one textfile; you can't open any other files from your local computer from textbook code running in your browser.</note>

<!--   
  <p>Opening a file requires that you, as a programmer, and Python agree about the
            location of the file on your disk.  The way that files are located on disk is
            by their <term>path</term>  You can think of the filename as the short name for a file,
            and the path as the full name.  For example on a Mac if you save the file
    <c>hello.txt</c> in your home directory the path to that file is
    <c>/Users/yourname/hello.txt</c>  On a Windows machine the path looks a bit different
            but the same principles are in use.  For example on windows the path might be
    <c>C:\Users\yourname\My Documents\hello.txt</c>
  </p>
  <note>
    <p>
      <term>The History of Path Separators</term>
    </p>
    <p>Why is the path separator a <c>/</c> on Unix/Linux/MacOS systems and <c>\</c> on
                Microsoft Windows systems? The concept of a hierarchy of folders
                was first developed in Unix. On a Unix command line a <c classes="code">/</c> is used to
                separate folder names in a file path and dashes are used to specify command line
                options, e.g.,  <c>path/to/file/myfile -long -reverse</c>. On a
                Windows system the <c>/</c> character is used for command line options, so the designers
                of Windows decided to use the <c>\</c> for separating folder names in a file
                path, e.g., <c>path\to\file\myfile /long /reverse</c>. Using a
      <c>\</c> to separate folder names in a path is problematic because the <c>\</c>
                character is also used as an escape character for special characters, such
                as <c>\n</c> for a new line character. Bottom line, we will always use the <c>/</c>
                character to separate folder names in a path, and even on Windows
                system the file path will work just fine.</p>
  </note>
  <p xml:id="files_index-0">You can access files in sub-folders, also called directories, under your home directory
            by adding a slash and the name of the folder.  For example, if you had a file
            called <c>hello.py</c> in a folder called <c>CS128</c> that is inside a folder called
    <c>VSCodeProjects</c> under your home directory, then the full name for the file
    <c>hello.py</c> is <c>/Users/yourname/VSCodeProjects/CS128/hello.py</c>.
            This is called an <em>absolute file path</em>. An <em>absolute file path</em> typically
            only works on a specific computer. Think about it for a second. What other
            computer in the world is going to have an <em>absolute file path</em> that starts with
    <c>/Users/yourname</c>?
  </p>
  <p>If a file is not in the same folder as your python program, you need to tell
            the computer how to reach it. A <em>relative file path</em> starts from the folder
            that contains your python program and follows a computer's file hierarchy. A
            file hierarchy contains folders which contains files and other sub-folders.
            Specifying a sub-folder is easy &#x2013; you simply specify the sub-folder's name.
            To specify a <em>parent</em> folder you use the special <c>..</c> notation because every file
            and folder has one unique parent. You can use the <c>..</c>
            notation multiple times in a file path to move multiple levels up a file
            hierarchy. Here is an example file hierarchy that contains multiple folders,
            files, and sub-folders. Folders in the diagram are displayed in <term>bold</term> type.</p>
  <image source="Files/Figures/ExampleFileHierarchy.png" width="50%"/>
  <p>Using the example file hierarchy above, the program, <c>myPythonProgram.py</c>
            could access each of the data files using the following <em>relative file paths</em>:
  </p>
  <p>
    <ul>
      <li>
        <p>
          <c>data1.txt</c>
        </p>
      </li>
      <li>
        <p>
          <c>../myData/data2.txt</c>
        </p>
      </li>
      <li>
        <p>
          <c>../myData/data3.txt</c>
        </p>
      </li>
      <li>
        <p>
          <c>../../otherFiles/extraData/data4.txt</c>
        </p>
      </li>
    </ul>
  </p>
  <p>Here's the important rule to remember: If your file and your Python program are
            in the same directory you can simply use the filename like this:
    <c>open('myfile.txt', 'r')</c>. If your file and your Python program are in
            different directories then you must refer to one or more directories,
            either in a <em>relative file path</em> to the file
            like this: <c>open('../myData/data3.txt', 'r')</c>, or in an <em>absolute file path</em> like
    <c>open('/users/bmiller/myFiles/allProjects/myData/data3.txt', 'r')</c>.
  </p> -->

  <p> <term>Check your understanding</term> </p>
      <exercise label="mc_findingAFileOnYourFilesystem_1">
        <statement>
          <p>Say you are in a directory called Project. In it, you have a file with your Python code. 
          You would like to read in data from a file called “YearlyProjections.csv” which is in a folder called CompanyData, 
          which is inside of Project. What is the best way to open the file in your Python program?</p>
        </statement>
        <choices>
          <choice>
            <statement>
              <p>open("YearlyProjections.csv", "r")</p>
            </statement>
            <feedback> This would try to open a file inside of Project (but that is not where the file is.) </feedback>
          </choice>
          <choice>
            <statement>
              <p>open("../CompanyData/YearlyProjections.csv", "r")</p>
            </statement>
            <feedback> This would go to the parent directory of Project and look for a subdirectory of that called CompanyData. But CompanyData is inside Project so it wouldn't be found. </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>open("CompanyData/YearlyProjections.csv", "r")</p>
            </statement>
            <feedback> Yes, this is how you can access the file! </feedback>
          </choice>
          <choice>
            <statement>
              <p>open("Project/CompanyData/YearlyProjections.csv", "r")</p>
            </statement>
            <feedback> This would try to find a subdirectory Project of the current directory called Project. </feedback>
          </choice>
          <choice>
            <statement>
              <p>open("../YearlyProjections.csv", "r")</p>
            </statement>
            <feedback> Remember that '..' will bring you up one level to the parent directory. This would try to open a csv file in the parent directory of Project (but that is not where the file is.) </feedback>
          </choice>
        </choices>
      </exercise>

      <exercise label="mc_findingAFileOnYourFilesystem_2">
        <statement>
          <p>Which of the following paths are relative file paths?</p>
        </statement>
        <choices multiple-correct="yes">
          <choice correct="yes">
            <statement>
              <p> "Stacy/Applications/README.txt"</p>
            </statement>
            <feedback> Yes, this is a relative file path. You can tell by the lack of "/" at the beginning of the path. </feedback>
          </choice>
          <choice>
            <statement>
              <p> "/Users/Raquel/Documents/graduation_plans.doc"</p>
            </statement>
            <feedback> This is an absolute file path. All absolute file paths start with "/". </feedback>
          </choice>
          <choice>
            <statement>
              <p>"/private/tmp/swtag.txt"</p>
            </statement>
            <feedback> This is an absolute file path. Not all absolute file paths contain "User"! Instead, check to see if the path starts with "/". </feedback>
          </choice>
          <choice correct="yes">
            <statement>
              <p>"ScienceData/ProjectFive/experiment_data.csv"</p>
            </statement>
            <feedback> Yes, this is a relative file path. You can tell by the lack of "/" at the beginning of the path. </feedback>
          </choice>
        </choices>
      </exercise>
</section>
