<?xml version="1.0"?>
<section xml:id="files_writing-csv">
  <title>Writing Files as <c>csv</c></title>
  <p>We already introduced the <c>csv</c> module in the previous section. Let's examine some examples using a <c>csv.writer</c> object.</p>
  <p>Like the reader object, the <c>csv.writer</c> function takes a opened file object. Once set up, the csv file can be written to with <c>writerow</c>. 
  Make note that writerow does not need an explicit newline character <c>\n</c> to know when to end a line of text. This sets it apart for the the regular <c>file.write()</c> function.</p>
  <program xml:id="ch11_sec9_p1" interactive="activecode" language="python">
    <input>
import csv
data = [["Column_1_Name","Column_2_Name","Column_3_Name"],
		[1,2,3],
		[50,40,23]
]

with open("new_file.csv", "w", newline='') as file:
	csv_writer = csv.writer(file, delimiter=',')
	for line in data:
		csv_writer.writerow(line)
</input>
  </program>
  <p>This program will create a file called <c>new_file.csv</c> with the contents:</p>
  <pre>Column_1_Name,Column_2_Name,Column_3_Name
1,2,3
50,40,23</pre>
  <p>You may have noticed there is one new piece of code in our <c>with open(...</c> line. The <c>newline=''</c> parameter is needed here to avoid adding extra blank lines to our output file. 
  Try running this code locally without that part to see the difference.</p>
  
  <p>There is one other writer method you may find useful, which is <c>writerows</c>. This allows you to write multiple rows of data at the same time. When applied to the previous 
  example, it saves us from having to set up a loop.</p>
  <program xml:id="ch11_sec9_p2" interactive="activecode" language="python">
    <input>
import csv

data = [["Column_1_Name","Column_2_Name","Column_3_Name"],
		[1,2,3],
		[50,40,23]
]

with open("new_file.csv", "w", newline='') as file:
	csv_writer = csv.writer(file, delimiter=',')
	csv_writer.writerows(data)
</input>
  </program>
</section>
