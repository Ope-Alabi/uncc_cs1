<?xml version="1.0"?>
<section xml:id="files_alternative-file-reading-methods">
  <title>Alternative File Reading Methods</title>
  <!-- <DataFileNode line="19" runestone_options="{'subchapter': 'AlternativeFileReadingMethods', 'chapter': 'Files', 'basecourse': 'thinkcspy', 'optional': '', 'optclass': '', 'divid': 'ccdata2.txt', 'qnumber': '', 'cols': 65, 'rows': 20, 'filecontent': '1850                  -0.37                                       2.24E-7\n1860                  -0.34                                       3.94E-7\n1870                  -0.28                                       6.6E-7\n1880                  -0.24                                       1.1\n1890                  -0.42                                       1.72\n1900                  -0.2                                        2.38\n1910                  -0.49                                       3.34\n1920                  -0.25                                       4.01\n1930                  -0.14                                       4.53\n1940                   0.01                                       5.5\n1950                  -0.17                                       6.63\n1960                  -0.05                                       10.5\n1970                  -0.03                                       16\n1980                   0.09                                       20.3\n1990                   0.3                                        22.6\n2000                   0.29                                       24.9\n2010                   0.56                                       32.7\n2019                   0.74                                       33.3\n', 'hidden': '', 'edit': 'false', 'question_label': '11.5.1'}" source="/Users/bmiller/Runestone/books/thinkcspy/_sources/Files/AlternativeFileReadingMethods.rst">
        </DataFileNode> -->
  <p>Once you have a file “object”, the thing returned by the open function, Python provides three methods to read data from that object.
   The <c>read()</c> method returns the entire contents of the file as a single string or just some characters if you provide a number as an input parameter. The <c>readlines</c> method returns the entire contents of the entire file as a list of strings, where each item in the list is one line of the file. The <c>readline</c> method reads one line from the file and returns it as a string. The strings returned by <c>readlines</c> or <c>readline</c> will contain the newline character at the end. <xref ref="files_filemethods2a"/> summarizes these methods and the following session shows them in action.</p>

<table xml:id="files_filemethods2a">
  <title>A simple table</title>
  <tabular width="100%" style="table-layout: auto;">
    <row header="yes" bottom="medium" >
      <cell width="20%">Method Name </cell>
      <cell width="30%">Use </cell>
      <cell width="50%">Explanation </cell>
    </row>
    <row bottom="minor">
      <cell><c>write</c></cell>
      <cell><c>filevar.write(astring)</c></cell>
      <cell><line>Add a string to the end of the file. <c>filevar</c></line> 
      <line>must refer to a file that has been opened for writing.</line></cell>
    </row>
    <row bottom="minor">
      <cell><c>read(n)</c></cell>
      <cell><c>filevar.read()</c></cell>
      <cell><line>Read and return a string of <c>n</c> characters, or the</line> 
      <line>entire file as a single string if <c>n</c> is not provided.</line></cell>
    </row>
    <row bottom="minor">
      <cell><c>readline(n)</c></cell>
      <cell><c>filevar.readline()</c></cell>
      <cell><line>Read and return the next line of the file with all text up </line>
      <line>to and including the newline character. If <c>n</c> is provided as a </line>
      <line>parameter, then only <c>n</c> characters will be returned if the line </line>
      <line>is longer than <c>n</c>. <term>Note</term> the parameter <c>n</c> is not </line>
      <line>supported in the browser version of Python, and in fact is rarely used in </line>
      <line>practice, you can safely ignore it.</line></cell>
    </row>
    <row bottom="medium">
      <cell><c>readlines(n)</c></cell>
      <cell><c>filevar.readlines()</c></cell>
      <cell><line>Returns a list of strings, each representing a single line </line>
      <line>of the file. If <c>n</c> is not provided then all lines of the file </line>
      <line>are returned. If <c>n</c> is provided then <c>n</c> characters are </line>
      <line>read but <c>n</c> is rounded up so that an entire line is returned. </line>
      <line><term>Note</term> Like <c>readline</c> <c>readlines</c> ignores </line>
      <line>the parameter n in the browser.</line></cell>
    </row>
  </tabular>

</table>

  <p>In this course, we will generally either iterate through the lines returned by <c>readlines()</c> with a for loop, or use <c>read()</c> to get all of the contents as a single string.</p>
  <p>In other programming languages, where they don't have the convenient for loop method of going through the lines of the file one by one, they use a different pattern which requires a different kind of loop, the <c>while</c> loop. Fortunately, you don't need to learn this other pattern, and we will put off consideration of <c>while</c> loops until later in this course. We don't need them for handling data from files.</p>
  
  <note>A common error that novice programmers make is not realizing that all these ways of reading the file contents, <term>use up the file</term>. After you call readlines(), if you call it again you'll get an empty list.</note>

<p><term>Check your Understanding</term></p>

    <program language="english">
        <input>
            Writing essays for school can be difficult but
            many students find that by researching their topic that they
            have more to say and are better informed. Here are the university
            we require many undergraduate students to take a first year writing requirement
            so that they can
            have a solid foundation for their writing skills. This comes
            in handy for many students.
            Different schools have different requirements, but everyone uses
            writing at some point in their academic career, be it essays, research papers,
            technical write ups, or scripts.
        </input>
    </program>

    <exercise label="mc_alternativeFileReadingMethods_1">
      <statement>
        <p>1. Using the file <c>school_prompt2.txt</c>, find the number of characters in the file and assign that value to the variable <c>num_char</c>.</p>
      </statement>
      <program xml:id="ac_alternativeFileReadingMethods_1" label="ac_alternativeFileReadingMethods_1" interactive="activecode" language="python" datafile="school_prompt2.txt">
        <input>
            
        </input>
         <tests>
    from unittest.gui import TestCaseGui

    class MyTests(TestCaseGui):
      def testOne(self):
        self.assertTrue('num_char' in self.getEditorText(), "Testing that you are using the specified variable name 'num_chars'.")
        self.assertTrue(num_char == 537 , "testing the value of the num_char is correct .")
    MyTests().main()
    
   </tests>
      </program>
    </exercise>

  <program language="english">
        <input>
            This summer I will be travelling.
            I will go to...
            Italy: Rome
            Greece: Athens
            England: London, Manchester
            France: Paris, Nice, Lyon
            Spain: Madrid, Barcelona, Granada
            Austria: Vienna
            I will probably not even want to come back!
            However, I wonder how I will get by with all the different languages.
            I only know English!
        </input>
  </program>

  <exercise label="mc_alternativeFileReadingMethods_2">
    <statement>
      <p>2. Find the number of lines in the file, <c>travel_plans2.txt</c>, and assign it to the variable <c>num_lines</c>.</p>
    </statement>
    <program xml:id="ac_alternativeFileReadingMethods_2" label="ac_alternativeFileReadingMethods_2" interactive="activecode" language="python" datafile="travel_plans2.txt">
      <input>
  
      </input>
      <tests>
from unittest.gui import TestCaseGui

class MyTests(TestCaseGui):
  def testOne(self):
    self.assertTrue('num_lines' in self.getEditorText(), "Testing that you are using the specified variable name 'num_lines'.")
    self.assertTrue(num_lines == 11 , "testing the value of the num_lines is correct .")
MyTests().main()
        
       </tests>
    </program>
  </exercise>

  <program language="english">
        <input>
            This summer I will be travelling.
            I will go to...
            Italy: Rome
            Greece: Athens
            England: London, Manchester
            France: Paris, Nice, Lyon
            Spain: Madrid, Barcelona, Granada
            Austria: Vienna
            I will probably not even want to come back!
            However, I wonder how I will get by with all the different languages.
            I only know English!
        </input>
  </program>

  <exercise label="mc_alternativeFileReadingMethods_3">
    <statement>
      <p>3. Create a string called <c>first_forty</c> that is comprised of the first 40 characters of <c>emotion_words2.txt.</c></p>
    </statement>
    <program xml:id="ac_alternativeFileReadingMethods_3" label="ac_alternativeFileReadingMethods_3" interactive="activecode" language="python" datafile="emotion_words2.txt">
      <input>
       
      </input>
       <tests>
from unittest.gui import TestCaseGui
      
class MyTests(TestCaseGui):
  def testOne(self):
    self.assertTrue('first_forty' in self.getEditorText(), "Testing that you are using the specified variable name 'first_forty'.")
    self.assertTrue(len(first_forty) == 40 , "testing the length of first_forty is correct .")
    self.assertTrue('[0:40]' in self.getEditorText() or '[:40]' in self.getEditorText()  , "Testing that you are using slicing.")
MyTests().main()
          
         </tests>
      
    </program>
  </exercise>

  <datafile label="emotion_travel_plans2" filename="travel_plans2.txt" rows="10" cols="6" editable="no" hide="yes"> 
    <pre>
      This summer I will be travelling.
      I will go to...
      Italy: Rome
      Greece: Athens
      England: London, Manchester
      France: Paris, Nice, Lyon
      Spain: Madrid, Barcelona, Granada
      Austria: Vienna
      I will probably not even want to come back!
      However, I wonder how I will get by with all the different languages.
      I only know English!
    </pre>
  </datafile>

  <datafile label="school" filename="school_prompt2.txt" rows="10" cols="6" editable="no" hide="yes"> 
    <pre>
      Writing essays for school can be difficult but
      many students find that by researching their topic that they
      have more to say and are better informed. Here are the university
      we require many undergraduate students to take a first year writing requirement
      so that they can
      have a solid foundation for their writing skills. This comes
      in handy for many students.
      Different schools have different requirements, but everyone uses
      writing at some point in their academic career, be it essays, research papers,
      technical write ups, or scripts.
    </pre>
  </datafile>

  <datafile label="emotion_words2" filename="emotion_words2.txt" rows="10" cols="6" editable="no" hide="yes"> 
    <pre>
      Sad upset blue down melancholy somber bitter troubled
      Angry mad enraged irate irritable wrathful outraged infuriated
      Happy cheerful content elated joyous delighted lively glad
      Confused disoriented puzzled perplexed dazed befuddled
      Excited eager thrilled delighted
      Scared afraid fearful panicked terrified petrified startled
      Nervous anxious jittery jumpy tense uneasy apprehensive
    </pre>
  </datafile>

</section>
