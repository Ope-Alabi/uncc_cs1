<?xml version="1.0"?>
<section xml:id="lists_list-methods">
  <title>List Methods</title>

<p> The dot operator can also be used to access built-in methods of list objects.
    As you remember, unlike strings, lists are mutable. As a consequence, list methods can have different behaviors than string methods. Let's look at these.</p>
<ul>
<li> <term>Return Type Methods:</term> These methods work the same way as string methods: they give us a value but keep the original list the same.</li>
<li> <term>Mutating Methods:</term> These methods modify the list but do not return anything. Because of this, we shouldn't use these methods on the right hand side of assignment (we shouldn't assign them to a variable).</li>
<li> <term>Hybrid Methods:</term> These methods behave as both mutating and return type methods. They change the list and also return a value.</li>
</ul>

 <p>The following table provides a summary of the list methods shown above.  The column labeled <title_reference>behavior</title_reference> gives an explanation as to what the return value is as it relates to the new value of the list. </p>
  <table>
    <tabular>
      <row header="yes">
        <cell>
                            Method
                        </cell>
        <cell>
                            Parameters
                        </cell>
        <cell>
                            Behavior
                        </cell>
        <cell>
                            Description
                        </cell>
      </row>
      <row>
        <cell>
                            append
                        </cell>
        <cell>
                            item
                        </cell>
        <cell>
                            mutating
                        </cell>
        <cell>
                            Adds a new item to the end of a list
                        </cell>
      </row>
      <row>
        <cell>
                            insert
                        </cell>
        <cell>
                            position, item
                        </cell>
        <cell>
                            mutating
                        </cell>
        <cell>
                            Inserts a new item at the position given
                        </cell>
      </row>
      <row>
        <cell>
                            pop
                        </cell>
        <cell>
                            none
                        </cell>
        <cell>
                            hybrid
                        </cell>
        <cell>
                            Removes and returns the last item
                        </cell>
      </row>
      <row>
        <cell>
                            pop
                        </cell>
        <cell>
                            position
                        </cell>
        <cell>
                            hybrid
                        </cell>
        <cell>
                            Removes and returns the item at position
                        </cell>
      </row>
      <row>
        <cell>
                            sort
                        </cell>
        <cell>
                            none
                        </cell>
        <cell>
                            mutating
                        </cell>
        <cell>
                            Modifies a list to be sorted
                        </cell>
      </row>
      <row>
        <cell>
                            reverse
                        </cell>
        <cell>
                            none
                        </cell>
        <cell>
                            mutating
                        </cell>
        <cell>
                            Modifies a list to be in reverse order
                        </cell>
      </row>
      <row>
        <cell>
                            index
                        </cell>
        <cell>
                            item
                        </cell>
        <cell>
                            return idx
                        </cell>
        <cell>
                            Returns the position of first occurrence of item, error if not found
                        </cell>
      </row>
      <row>
        <cell>
                            count
                        </cell>
        <cell>
                            item
                        </cell>
        <cell>
                            return ct
                        </cell>
        <cell>
                            Returns the number of occurrences of item
                        </cell>
      </row>
      <row>
        <cell>
                            remove
                        </cell>
        <cell>
                            item
                        </cell>
        <cell>
                            mutating
                        </cell>
        <cell>
                            Removes the first occurrence of item
                        </cell>
      </row>
    </tabular>
  </table>



  <p>Here are some examples on these methods. Be sure to experiment with them to gain a better understanding of what they do. You are expected to be comfortable using these methods!</p>


  <program xml:id="ac_listMethods_1" label="ac_listMethods_1" interactive="activecode" language="python">
    <input>
# Let's create a list and fill it with some values
mylist = []
mylist.append(5)
mylist.append(27)
mylist.append(3)
mylist.append(12)
print(mylist)
        </input>
  </program>

<p> Another way to add items: </p>

  <program xml:id="ac_listMethods_2" label="ac_listMethods_2" interactive="activecode" language="python">
    <input>
mylist = [5, 27, 3, 12]
mylist.insert(1, 12)        # Insert 12 at pos 1, shift other items up
print(mylist)
        </input>
  </program>

<p> Some return type methods: </p>

  <program xml:id="ac_listMethods_3" label="ac_listMethods_3" interactive="activecode" language="python">
    <input>
mylist = [5, 27, 3, 12]
print(mylist.count(12))     # How many times is 12 in mylist?
print(mylist.index(3))      # Find index of first 3 in mylist
print(mylist) # mylist is unchanged as count and index are return type methods
    </input>
  </program>

<p> Some mutating methods: </p>

  <program xml:id="ac_listMethods_4" label="ac_listMethods_4" interactive="activecode" language="python">
    <input>
mylist = [5, 27, 3, 12]
mylist.reverse()
print(mylist)

mylist.sort()
print(mylist)

mylist.remove(5) # Removes the value 5 from the list
print(mylist)

my_second_list = mylist.append(5)   # We shouldn't assign the result of a mutating method to a variable!
print(my_second_list)  # It will be None
      </input>
  </program>

 <p>It is important to remember that methods like <c>append</c>, <c>sort</c>,
    and <c>reverse</c> all return <c>None</c>.  This means that re-assigning <c>mylist</c> 
    to the result of sorting <c>mylist</c> will result in losing the entire list. </p>


<p> Some hybrid methods: </p>


  <program xml:id="ac_listMethods_5" label="ac_listMethods_5" interactive="activecode" language="python">
    <input>
mylist = [5, 27, 3, 12]
lastitem = mylist.pop() # Removes and returns the last item of the list
print(lastitem)
print(mylist)

seconditem = mylist.pop(1)   # Removes and returns the item at index 1
print(seconditem)

mylist.pop() # Remember that pop is a hybrid method
print(mylist)
        </input>
  </program>
  <p>Notice that there are two ways to use the <c>pop</c> method.  The first, with no parameter, will remove and return the
            last item of the list.  If you provide a parameter for the position, <c>pop</c> will remove and return the
            item at that position. Either way the list is changed. Hybrid methods will also change 
            the list without assignment to a variable, as shown with the last example above.</p>
 
  <p>Details for these methods and others
            can be found in the <url href="http://docs.python.org/py3k/library/stdtypes.html#sequence-types-str-bytes-bytearray-list-tuple-range" visual="http://docs.python.org/py3k/library/stdtypes.html#sequence-types-str-bytes-bytearray-list-tuple-range">Python Documentation</url>.</p>
 
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="mc_listMethods_1">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [4, 2, 8, 6, 5]
alist.append(True)
alist.append(False)
print(alist)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4, 2, 8, 6, 5, False, True]</p>
        </statement>
        <feedback>
                    True was added first, then False was added last.
                </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[4, 2, 8, 6, 5, True, False]</p>
        </statement>
        <feedback>
                    Yes, each item is added to the end of the list.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>[True, False, 4, 2, 8, 6, 5]</p>
        </statement>
        <feedback>
                    append adds at the end, not the beginning.
                </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mc_listMethods_2">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [4, 2, 8, 6, 5]
alist.insert(2, True)
alist.insert(0, False)
print(alist)
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>[False, 4, 2, True, 8, 6, 5]</p>
        </statement>
        <feedback>
                    Yes, first True was added at index 2, then False was added at index 0.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>[4, False, True, 2, 8, 6, 5]</p>
        </statement>
        <feedback>
                    insert will place items at the index position specified and move everything down to the right.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>[False, 2, True, 6, 5]</p>
        </statement>
        <feedback>
                    insert does not remove anything or replace anything.
                </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mc_listMethods_3">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [4, 2, 8, 6, 5]
temp = alist.pop(2)
temp = alist.pop()
print(alist)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[4, 8, 6]</p>
        </statement>
        <feedback>
                    pop(2) removes the item at index 2, not the 2 itself.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>[2, 6, 5]</p>
        </statement>
        <feedback>
                    pop() removes the last item, not the first.
                </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>[4, 2, 6]</p>
        </statement>
        <feedback>
                    Yes, first the 8 was removed, then the last item, which was 5.
                </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mc_listMethods_4">
    <statement>
      <p>What is printed by the following statements?</p>
      <program language="python">
        <input>
alist = [4, 2, 8, 6, 5]
alist = alist.pop(0)
print(alist)
</input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>[2, 8, 6, 5]</p>
        </statement>
        <feedback>
                    alist is now the value that was returned from pop(0).
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>[4, 2, 8, 6, 5]</p>
        </statement>
        <feedback>
                    pop(0) changes the list by removing the first item.
                </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>4</p>
        </statement>
        <feedback>
                    Yes, first the 4 was removed from the list, then returned and assigned to alist.  The list is lost.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>None</p>
        </statement>
        <feedback>
                    pop(0) returns the first item in the list so alist has now been changed.
                </feedback>
      </choice>
    </choices>
  </exercise>
  <note>
    <p>This workspace is provided for your convenience.  You can use this activecode window to try out anything you like.</p>
    <program xml:id="ac_listMethods_6_scratch" label="ac_listMethods_6_scratch" interactive="activecode" language="python">
      <input>


        </input>
    </program>
  </note>
</section>
