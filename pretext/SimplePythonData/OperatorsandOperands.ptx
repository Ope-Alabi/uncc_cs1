<?xml version="1.0"?>
<section xml:id="simple-python-data_operators-and-operands">
  <title>Operators and Operands</title>
  <p>
    <term>Operators</term> are special tokens that represent computations like addition,
            multiplication and division. The values the operator works on are called
    <term>operands</term>.
  </p>
  <p>The following are all legal Python expressions whose meaning is more or less
            clear:</p>
  <pre>20 + 32
hour - 1
hour * 60 + minute
minute / 60
5 ** 2
(5 + 9) * (15 - 7)</pre>

<p> Python uses special <c>characters</c> called <c>operators</c> that perform the following operations: </p>
<ul> 
<li> <c> + </c> addition </li>
<li> <c> - </c> subtraction </li>
<li> <c> * </c> multiplication </li>
<li> <c> / </c> division </li>
<li> <c> ** </c> exponentiation </li>
<li> <c> () </c> grouping </li>
<li> <c> // </c> integer division (round down division) </li>
<li> <c> % </c> modulo (remainder) </li>
</ul>

<p> There are several other operators that we will learn in future chapters. But these are the ones that you're going to need more or less all of your assignments! </p>

  <program xml:id="ch2_sec7_p1" interactive="activecode" language="python">
    <input>
print(2 + 3)   # Addition operator, expected result is 5
print(2 - 3)   # Subtraction operator, expected result is -1
print(2 * 3)   # Multiplication operator, expected result is 6
print(5 / 3)   # Division operator, expected result is 1.6666666666666666
print(3 ** 2)  # Exponentiation operator, expected result is 9
print(3*(2+4)) # Grouping operator, changes the precedence expected result is 18 
    </input>
  </program>

<p> The first six operators have functionality that you're most probably pretty familiar with! On the other hand, we have two more operators that are used frequently in programming but not that much in math classes.
These are integer division, and modulo. </p>

<p> In the previous example <c> 5 / 3 </c> resulted <c> 1.66666666 </c>. This is because <c>/</c> always returns a floating point result. However, in certain situations, we need an integer result from division.
<term>Integer division</term>, or the <c> // </c> operator, divides the number, but rounds it down to the nearest integer. So for the previous example, <c> 5 // 3 </c> will result <c> 1 </c> </p>

<p>The <term>modulo operator</term>, <c> % </c> yields
            the remainder when the first operand is divided by the second (that's why you can also remember it as remainder operator). For example, <c> 5 % 3 </c> will result <c> 2 </c> as   <c> 5 = 3 * 1 + 2 </c>.  </p>

  <program xml:id="ch2_sec7_p2" interactive="activecode" language="python">
    <input>
print(5//3) # Integer division operator, expected result is 1
print(60//7) # Integer division operator, expected result is 8
print(50//2) # Integer division operator works same as division operator when the result is integer

print(5%3) # Modulo operator, expected result is 2
print(60%7) # Modulo operator, expected result is 4
print(4%2) # Modulo operator, expected result is 0
    </input>
  </program>

   <p xml:id="simple-python-data_index-1">When a variable name appears in place of an operand, 
   python substitutes that variable name with its assigned value. For example, what if we wanted to convert 645 minutes into hours?
           </p>
  <program xml:id="ch2_sec7_p3" interactive="activecode" language="python">
    <input>
minutes = 645
hours = minutes / 60
print(hours)
    </input>
  </program>
 

 
<p>The modulo operator turns out to be surprisingly useful. For example, you can
            check whether one number is divisible by another&#x2014;if <c>x % y</c> is zero, then
    <c>x</c> is divisible by <c>y</c>.
            Also, you can extract the right-most digit or digits from a number.  For
            example, <c>x % 10</c> yields the right-most digit of <c>x</c> (in base 10).
            Similarly <c>x % 100</c> yields the last two digits.</p>

 <p>The remainder operator is extremely useful for doing conversions, say from seconds,
            to hours, minutes and seconds.
            If we start with a number of seconds, say 7684, the following program uses integer division and remainder to convert to an easier form.  Step through it to be sure you understand how the division and remainder operators are being used to
            compute the correct values.</p>
  <program xml:id="ch2_sec7_c1" interactive="activecode" language="python">
    <input>
          total_secs = 7684
          hours = total_secs // 3600
          secs_still_remaining = total_secs % 3600
          minutes =  secs_still_remaining // 60
          secs_finally_remaining = secs_still_remaining  % 60
    </input>
  </program>

  
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="ch2_sec7_q1">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 / 4)
        </input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>4.5</p>
        </statement>
        <feedback>
                    The / operator does exact division and returns a floating point result.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
                    The / operator does exact division and returns a floating point result.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
                    The / operator does exact division and returns a floating point result.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
                    The / operator does exact division and returns a floating point result.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="ch2_sec7_q2">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 // 4)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4.25</p>
        </statement>
        <feedback>
                    - The // operator does integer division and returns an integer result
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
                    - The // operator does integer division and returns an integer result, but it truncates the result of the division.  It does not round.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>4</p>
        </statement>
        <feedback>
                    - The // operator does integer division and returns the truncated integer result.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
                    - The // operator does integer division and returns the result of the division on an integer (not the remainder).
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="ch2_sec7_q3">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 % 4)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4.25</p>
        </statement>
        <feedback>
                    The % operator returns the remainder after division.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
                    The % operator returns the remainder after division.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
                    The % operator returns the remainder after division.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>2</p>
        </statement>
        <feedback>
                    The % operator returns the remainder after division.
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
