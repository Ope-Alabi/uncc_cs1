<<<<<<< HEAD
<?xml version="1.0"?>
<section xml:id="simple-python-data_operators-and-operands">
  <title>Operators and Operands</title>
  <p>
    <term>Operators</term> are special tokens that represent computations like addition,
            multiplication and division. The values the operator works on are called
    <term>operands</term>.
  </p>
  <p>The following are all legal Python expressions whose meaning is more or less
            clear:</p>
  <pre>20 + 32
hour - 1
hour * 60 + minute
minute / 60
5 ** 2
(5 + 9) * (15 - 7)</pre>
  <p>The tokens <c>+</c>,    <c>-</c>, and <c>*</c>, and the use of parenthesis for grouping,
            mean in Python what they mean in mathematics. The asterisk (<c>*</c>) is the
            token for multiplication, and <c>**</c> is the token for exponentiation.
            Addition, subtraction, multiplication, and exponentiation all do what you
            expect.</p>
  <program xml:id="ch02_15" interactive="activecode" language="python">
    <input>
print(2 + 3)
print(2 - 3)
print(2 * 3)
print(2 ** 3)
print(3 ** 2)
    </input>
  </program>
  <p xml:id="simple-python-data_index-1">When a variable name appears in the place of an operand, it is replaced with
            the value that it refers to before the operation is performed.
            For example, what if we wanted to convert 645 minutes into hours.
            In Python 3, division is denoted by the operator token <c>/</c> which always evaluates to a floating point
            result.</p>
  <program xml:id="ch02_16" interactive="activecode" language="python">
    <input>
minutes = 645
hours = minutes / 60
print(hours)
    </input>
  </program>
  <p>What if, on the other hand, we had wanted to know how many <em>whole</em> hours there
            are and how many minutes remain.  To help answer this question, Python gives us a second flavor of
            the division operator.  This version, called <term>integer division</term>, uses the token
    <c>//</c>.  It always <em>truncates</em> its result down to the next smallest integer (to
            the left on the number line).</p>
  <program xml:id="ch02_17" interactive="activecode" language="python">
    <input>
print(7 / 4)
print(7 // 4)

minutes = 645
hours = minutes // 60
print(hours)

print(6//4)
print(-6//4)
    </input>
  </program>
  <p>Pay particular attention to the first two examples above.  Notice that the result of floating point division
            is <c>1.75</c> but the result of the integer division is simply <c>1</c>.
            Take care that you choose the correct flavor of the division operator.  If
            you're working with expressions where you need floating point values, use the
            division operator <c>/</c>.  If you want an integer result, use <c>//</c>.
  </p>
  <p xml:id="simple-python-data_index-2">The <term>modulus operator</term>, sometimes also called the <term>remainder operator</term> or <term>integer remainder operator</term> works on integers (and integer expressions) and yields
            the remainder when the first operand is divided by the second. In Python, the
            modulus operator is a percent sign (<c>%</c>). The syntax is the same as for other
            operators.</p>
  <program xml:id="ch02_18" interactive="activecode" language="python">
    <input>
quotient = 7 // 3     # This is the integer division operator
print(quotient)
remainder = 7 % 3
print(remainder)
    </input>
  </program>
  <p>In the above example, 7 divided by 3 is 2 when we use integer division and there is a remainder of 1 when we use the modulus operator.</p>
  <p>The modulus operator turns out to be surprisingly useful. For example, you can
            check whether one number is divisible by another&#x2014;if <c>x % y</c> is zero, then
    <c>x</c> is divisible by <c>y</c>.
            Also, you can extract the right-most digit or digits from a number.  For
            example, <c>x % 10</c> yields the right-most digit of <c>x</c> (in base 10).
            Similarly <c>x % 100</c> yields the last two digits.</p>
  <p>Finally, returning to our time example, the remainder operator is extremely useful for doing conversions, say from seconds,
            to hours, minutes and seconds.
            If we start with a number of seconds, say 7684, the following program uses integer division and remainder to convert to an easier form.  Step through it to be sure you understand how the division and remainder operators are being used to
            compute the correct values.</p>
  <program xml:id="ch02_19_codelens" interactive="codelens" language="python">
    <input>
          total_secs = 7684
          hours = total_secs // 3600
          secs_still_remaining = total_secs % 3600
          minutes =  secs_still_remaining // 60
          secs_finally_remaining = secs_still_remaining  % 60
    </input>
  </program>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="test_question2_6_1">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 / 4)
        </input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>4.5</p>
        </statement>
        <feedback><p>
                    The / operator does exact division and returns a floating point result.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback><p>
                    The / operator does exact division and returns a floating point result.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback><p>
                    The / operator does exact division and returns a floating point result.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback><p>
                    The / operator does exact division and returns a floating point result.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question2_6_2">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 // 4)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4.25</p>
        </statement>
        <feedback><p>
                    - The // operator does integer division and returns an integer result
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback><p>
                    - The // operator does integer division and returns an integer result, but it truncates the result of the division.  It does not round.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>4</p>
        </statement>
        <feedback><p>
                    - The // operator does integer division and returns the truncated integer result.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback><p>
                    - The // operator does integer division and returns the result of the division on an integer (not the remainder).
        </p></feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="test_question2_6_3">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 % 4)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4.25</p>
        </statement>
        <feedback><p>
                    The % operator returns the remainder after division.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback><p>
                    The % operator returns the remainder after division.
        </p></feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback><p>
                    The % operator returns the remainder after division.
        </p></feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>2</p>
        </statement>
        <feedback><p>
                    The % operator returns the remainder after division.
        </p></feedback>
      </choice>
    </choices>
  </exercise>
</section>
=======
<?xml version="1.0"?>
<section xml:id="simple-python-data_operators-and-operands">
  <title>Operators and Operands</title>
  <p>
    <term>Operators</term> are special tokens that represent computations like addition,
            multiplication and division. The values the operator works on are called
    <term>operands</term>.
  </p>
  <p>The following are all legal Python expressions whose meaning is more or less
            clear:</p>
  <pre>20 + 32
hour - 1
hour * 60 + minute
minute / 60
5 ** 2
(5 + 9) * (15 - 7)</pre>

<p> Python uses special <c>characters</c> called <c>operators</c> that perform the following operations: </p>
<ul> 
<li> <c> + </c> addition </li>
<li> <c> - </c> subtraction </li>
<li> <c> * </c> multiplication </li>
<li> <c> / </c> division </li>
<li> <c> ** </c> exponentiation </li>
<li> <c> () </c> grouping </li>
<li> <c> // </c> integer division (round down division) </li>
<li> <c> % </c> modulo (remainder) </li>
</ul>

<p> There are several other operators that we will learn in future chapters. But these are the ones that you're going to need more or less all of your assignments! </p>

  <program xml:id="ch2_sec7_p1" interactive="activecode" language="python">
    <input>
print(2 + 3)   # Addition operator, expected result is 5
print(2 - 3)   # Subtraction operator, expected result is -1
print(2 * 3)   # Multiplication operator, expected result is 6
print(5 / 3)   # Division operator, expected result is 1.6666666666666666
print(3 ** 2)  # Exponentiation operator, expected result is 9
print(3*(2+4)) # Grouping operator, changes the precedence expected result is 18 
    </input>
  </program>

<p> The first six operators have functionality that you're most probably pretty familiar with! On the other hand, we have two more operators that are used frequently in programming but not that much in math classes.
These are integer division, and modulo. </p>

<p> In the previous example <c> 5 / 3 </c> resulted <c> 1.66666666 </c>. This is because <c>/</c> always returns a floating point result. However, in certain situations, we need an integer result from division.
<term>Integer division</term>, or the <c> // </c> operator, divides the number, but rounds it down to the nearest integer. So for the previous example, <c> 5 // 3 </c> will result <c> 1 </c> </p>

<p>The <term>modulo operator</term>, <c> % </c> yields
            the remainder when the first operand is divided by the second (that's why you can also remember it as remainder operator). For example, <c> 5 % 3 </c> will result <c> 2 </c> as   <c> 5 = 3 * 1 + 2 </c>.  </p>

  <program xml:id="ch2_sec7_p2" interactive="activecode" language="python">
    <input>
print(5//3) # Integer division operator, expected result is 1
print(60//7) # Integer division operator, expected result is 8
print(50//2) # Integer division operator works same as division operator when the result is integer

print(5%3) # Modulo operator, expected result is 2
print(60%7) # Modulo operator, expected result is 4
print(4%2) # Modulo operator, expected result is 0
    </input>
  </program>

   <p xml:id="simple-python-data_index-1">When a variable name appears in place of an operand, 
   python substitutes that variable name with its assigned value. For example, what if we wanted to convert 645 minutes into hours?
           </p>
  <program xml:id="ch2_sec7_p3" interactive="activecode" language="python">
    <input>
minutes = 645
hours = minutes / 60
print(hours)
    </input>
  </program>
 

 
<p>The modulo operator turns out to be surprisingly useful. For example, you can
            check whether one number is divisible by another&#x2014;if <c>x % y</c> is zero, then
    <c>x</c> is divisible by <c>y</c>.
            Also, you can extract the right-most digit or digits from a number.  For
            example, <c>x % 10</c> yields the right-most digit of <c>x</c> (in base 10).
            Similarly <c>x % 100</c> yields the last two digits.</p>

 <p>The remainder operator is extremely useful for doing conversions, say from seconds,
            to hours, minutes and seconds.
            If we start with a number of seconds, say 7684, the following program uses integer division and remainder to convert to an easier form.  Step through it to be sure you understand how the division and remainder operators are being used to
            compute the correct values.</p>
  <program xml:id="ch2_sec7_c1" interactive="activecode" language="python">
    <input>
          total_secs = 7684
          hours = total_secs // 3600
          secs_still_remaining = total_secs % 3600
          minutes =  secs_still_remaining // 60
          secs_finally_remaining = secs_still_remaining  % 60
    </input>
  </program>

  
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="ch2_sec7_q1">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 / 4)
        </input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>4.5</p>
        </statement>
        <feedback>
                    The / operator does exact division and returns a floating point result.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
                    The / operator does exact division and returns a floating point result.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
                    The / operator does exact division and returns a floating point result.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
                    The / operator does exact division and returns a floating point result.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="ch2_sec7_q2">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 // 4)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4.25</p>
        </statement>
        <feedback>
                    - The // operator does integer division and returns an integer result
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
                    - The // operator does integer division and returns an integer result, but it truncates the result of the division.  It does not round.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>4</p>
        </statement>
        <feedback>
                    - The // operator does integer division and returns the truncated integer result.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
                    - The // operator does integer division and returns the result of the division on an integer (not the remainder).
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="ch2_sec7_q3">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 % 4)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4.25</p>
        </statement>
        <feedback>
                    The % operator returns the remainder after division.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
                    The % operator returns the remainder after division.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
                    The % operator returns the remainder after division.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>2</p>
        </statement>
        <feedback>
                    The % operator returns the remainder after division.
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>
>>>>>>> 6b21168b0c3243abea66db80c0bd38b03afc202f
