<?xml version="1.0"?>
<section xml:id="simple-python-data_statements-and-expressions">
  <title>Statements and Expressions</title>
  <!--<video xml:id="expression_vid" youtube="3WgmLIsXFkI" width="auto"/>-->
  <p>A <term>statement</term> is an instruction that the Python interpreter can execute. We
            have only seen the assignment statement so far.  Some other kinds of statements
            that we'll see shortly are <c>while</c> statements, <c>for</c> statements, <c>if</c>
            statements,  and <c>import</c> statements.  (There are other kinds too!)</p>
  <p xml:id="simple-python-data_index-0">An <term>expression</term> is a combination of values, variables, operators, and calls
            to functions. Expressions need to be evaluated.  If you ask Python to <c>print</c> an expression, the interpreter
            <term>evaluates</term> the expression and displays the result.</p>
  <program xml:id="ac_statementsAndExpressions_1" label="ac_statementsAndExpressions_1" interactive="activecode" language="python">
    <input>
print(1 + 1)
        </input>
  </program>
  <p>The <em>evaluation of an expression</em> produces a value, which is why expressions
            can appear on the right hand side of assignment statements. A value all by
            itself is a simple expression, and so is a variable.  Evaluating a variable gives the value that the variable refers to.</p>
  <program xml:id="ac_statementsAndExpressions_2" label="ac_statementsAndExpressions_2" interactive="activecode" language="python">
    <input>
y = 3.14
print(y)
        </input>
  </program>
  <p>If we take a look at this same example in the Python shell, we will see one of the distinct differences between statements and expressions.</p>
  <program language="python">
    <input>
&gt;&gt;&gt; y = 3.14
&gt;&gt;&gt; print(y)
3.14
&gt;&gt;&gt; y
3.14
&gt;&gt;&gt;
</input>
  </program>
  <p>Note that when we enter the assignment statement, <c>y = 3.14</c>, only the prompt is returned.  There is no value.  This
            is due to the fact that statements, such as the assignment statement, do not return a value.  They are simply executed.</p>
  <p>On the other hand, the result of executing the assignment statement is the creation of a reference from a variable, <c>y</c>, to a value, <c>3.14</c>.  When we execute the print function working on <c>y</c>, we see the value that y is referring to.  In fact, evaluating <c>y</c> by itself results in the same response.</p>
  <subsection>
  <title>Operators and Operands</title>
  <p>
    <term>Operators</term> are special tokens that represent computations like addition,
            multiplication and division. The values the operator works on are called
    <term>operands</term>.
  </p>
  <p>The following are all legal Python expressions whose meaning is more or less
            clear:</p>
  <pre>20 + 32
hour - 1
hour * 60 + minute
minute / 60
5 ** 2
(5 + 9) * (15 - 7)</pre>

<p> Python uses special <c>characters</c> called <c>operators</c> that perform the following operations: </p>
<ul> 
<li> <c> + </c> addition </li>
<li> <c> - </c> subtraction </li>
<li> <c> * </c> multiplication </li>
<li> <c> / </c> division </li>
<li> <c> ** </c> exponentiation </li>
<li> <c> () </c> grouping </li>
<li> <c> // </c> integer division (round down division) </li>
<li> <c> % </c> modulo (remainder) </li>
</ul>

<p> There are several other operators that we will learn in future chapters. But these are the ones that you're going to need more or less all of your assignments! </p>

  <program xml:id="ac_statementsAndExpressions_3" label="ac_statementsAndExpressions_3" interactive="activecode" language="python">
    <input>
print(2 + 3)   # Addition operator, expected result is 5
print(2 - 3)   # Subtraction operator, expected result is -1
print(2 * 3)   # Multiplication operator, expected result is 6
print(5 / 3)   # Division operator, expected result is 1.6666666666666666
print(3 ** 2)  # Exponentiation operator, expected result is 9
print(3*(2+4)) # Grouping operator, changes the precedence expected result is 18 
    </input>
  </program>

<p> The first six operators have functionality that you're most probably pretty familiar with! On the other hand, we have two more operators that are used frequently in programming but not that much in math classes.
These are integer division, and modulo. </p>

<p> In the previous example <c> 5 / 3 </c> resulted <c> 1.66666666 </c>. This is because <c>/</c> always returns a floating point result. However, in certain situations, we need an integer result from division.
<term>Integer division</term>, or the <c> // </c> operator, divides the number, but rounds it down to the nearest integer. So for the previous example, <c> 5 // 3 </c> will result <c> 1 </c> </p>

<p>The <term>modulo operator</term>, <c> % </c> yields
            the remainder when the first operand is divided by the second (that's why you can also remember it as remainder operator). For example, <c> 5 % 3 </c> will result <c> 2 </c> as   <c> 5 = 3 * 1 + 2 </c>.  </p>

  <program xml:id="ac_statementsAndExpressions_4" label="ac_statementsAndExpressions_4" interactive="activecode" language="python">
    <input>
print(5//3) # Integer division operator, expected result is 1
print(60//7) # Integer division operator, expected result is 8
print(50//2) # Integer division operator works same as division operator when the result is integer

print(5%3) # Modulo operator, expected result is 2
print(60%7) # Modulo operator, expected result is 4
print(4%2) # Modulo operator, expected result is 0
    </input>
  </program>

   <p xml:id="simple-python-data_index-1">When a variable name appears in place of an operand, 
   python substitutes that variable name with its assigned value. For example, what if we wanted to convert 645 minutes into hours?
           </p>
  <program xml:id="ac_statementsAndExpressions_5" label="ac_statementsAndExpressions_5" interactive="activecode" language="python">
    <input>
minutes = 645
hours = minutes / 60
print(hours)
    </input>
  </program>
 

 
<p>The modulo operator turns out to be surprisingly useful. For example, you can
            check whether one number is divisible by another&#x2014;if <c>x % y</c> is zero, then
    <c>x</c> is divisible by <c>y</c>.
            Also, you can extract the right-most digit or digits from a number.  For
            example, <c>x % 10</c> yields the right-most digit of <c>x</c> (in base 10).
            Similarly <c>x % 100</c> yields the last two digits.</p>

 <p>The remainder operator is extremely useful for doing conversions, say from seconds,
            to hours, minutes and seconds.
            If we start with a number of seconds, say 7684, the following program uses integer division and remainder to convert to an easier form.  Step through it to be sure you understand how the division and remainder operators are being used to
            compute the correct values.</p>
  <program xml:id="ac_statementsAndExpressions_6" label="ac_statementsAndExpressions_6" interactive="activecode" language="python">
    <input>
          total_secs = 7684
          hours = total_secs // 3600
          secs_still_remaining = total_secs % 3600
          minutes =  secs_still_remaining // 60
          secs_finally_remaining = secs_still_remaining  % 60
    </input>
  </program>

  
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="mc_statementsAndExpressions_1">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 / 4)
        </input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>4.5</p>
        </statement>
        <feedback>
                    The / operator does exact division and returns a floating point result.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
                    The / operator does exact division and returns a floating point result.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
                    The / operator does exact division and returns a floating point result.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
                    The / operator does exact division and returns a floating point result.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mc_statementsAndExpressions_2">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 // 4)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4.25</p>
        </statement>
        <feedback>
                    - The // operator does integer division and returns an integer result
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
                    - The // operator does integer division and returns an integer result, but it truncates the result of the division.  It does not round.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>4</p>
        </statement>
        <feedback>
                    - The // operator does integer division and returns the truncated integer result.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>2</p>
        </statement>
        <feedback>
                    - The // operator does integer division and returns the result of the division on an integer (not the remainder).
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mc_statementsAndExpressions_3">
    <statement>
      <p>What value is printed when the following statement executes?</p>
      <program language="python">
        <input>
print(18 % 4)
        </input>
      </program>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>4.25</p>
        </statement>
        <feedback>
                    The % operator returns the remainder after division.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>5</p>
        </statement>
        <feedback>
                    The % operator returns the remainder after division.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>4</p>
        </statement>
        <feedback>
                    The % operator returns the remainder after division.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>2</p>
        </statement>
        <feedback>
                    The % operator returns the remainder after division.
        </feedback>
      </choice>
    </choices>
  </exercise>
  </subsection>
  <subsection>
  <title>Order of Operations</title>
  <!--<video xml:id="precedencevid" youtube="Ezve3QJv6Aw" width="auto"/>-->
  <p>When more than one operator appears in an expression, the order of evaluation
            depends on the <term>rules of precedence</term>. Python follows the same precedence
            rules for its mathematical operators that mathematics does.</p>
  <!--The acronym PEMDAS-->
  <!--is a useful way to remember the order of operations:-->
  <p>
    <ol marker="1">
      <li>
        <p>Parentheses have the highest precedence and can be used to force an
                    expression to evaluate in the order you want. Since expressions in
                    parentheses are evaluated first, <c>2 * (3-1)</c> is 4, and <c>(1+1)**(5-2)</c> is
                    8. You can also use parentheses to make an expression easier to read, as in
                    <c>(minute * 100) / 60</c>, even though it doesn't change the result.</p>
      </li>
      <li>
        <p>Exponentiation has the next highest precedence, so <c>2**1+1</c> is 3 and
                    not 4, and <c>3*1**3</c> is 3 and not 27.  Can you explain why?</p>
      </li>
      <li>
        <p>Multiplication and both division operators have the same
                    precedence, which is higher than addition and subtraction, which
                    also have the same precedence. So <c>2*3-1</c> yields 5 rather than 4, and
                    <c>5-2*2</c> is 1, not 6.</p>
      </li>
      <li>
        <p>Operators with the <em>same</em> precedence (except for <c>**</c>) are
                    evaluated from left-to-right. In algebra we say they are <em>left-associative</em>.
                    So in the expression <c>6-3+2</c>, the subtraction happens first, yielding 3.
                    We then add 2 to get the result 5. If the operations had been evaluated from
                    right to left, the result would have been <c>6-(3+2)</c>, which is 1.</p>
      </li>
    </ol>
  </p>
  <!--(The-->
  <!--acronym PEDMAS could mislead you to thinking that division has higher-->
  <!--precedence than multiplication, and addition is done ahead of subtraction.-->
  <!--Don't be misled.  Subtraction and addition are at the same precedence, and-->
  <!--the left-to-right rule applies.)-->
  <note>
    <p>An exception to the left-to-right
                left-associative rule is the exponentiation operator <title_reference>**</title_reference>. A useful hint
                is to always use parentheses to force exactly the order you want when
                exponentiation is involved:</p>
    <program xml:id="ac_statementsAndExpressions_7" label="ac_statementsAndExpressions_7" interactive="activecode" language="python">
      <input>
print(2 ** 3 ** 2)     # the right-most ** operator gets done first!
print((2 ** 3) ** 2)   # use parentheses to force the order you want!
        </input>
    </program>
  </note>
  <!--The immediate mode command prompt of Python is great for exploring and-->
  <!--experimenting with expressions like this.-->
  <p>See <xref ref="appendices_operator-precedence-table"/> for <em>all</em> the operators introduced in this book.
            You will also see many upcoming non-mathematical Python operators.</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="mc_statementsAndExpressions_4">
    <statement>
      <p>What is the value of the following expression:</p>
      <program language="python">
        <input>
16 - 2 * 5 // 3 + 1
		</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>14</p>
        </statement>
        <feedback>
                    Using parentheses, the expression is evaluated as (2*5) first, then (10 // 3), then (16-3), and then (13+1).
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>24</p>
        </statement>
        <feedback>
                    Remember that * has precedence over -.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>3</p>
        </statement>
        <feedback>
                    Remember that // has precedence over -.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>13.667</p>
        </statement>
        <feedback>
                    Remember that // does integer division.
                </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mc_statementsAndExpressions_5">
    <statement>
      <p>What is the value of the following expression:</p>
      <program language="python">
        <input>
2 ** 2 ** 3 * 3
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>768</p>
        </statement>
        <feedback>
                    Exponentiation has precedence over multiplication, but its precedence goes from right to left!  So 2 ** 3 is 8, 2 ** 8 is 256 and 256 * 3 is 768.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>128</p>
        </statement>
        <feedback>
                    Exponentiation (**) is processed right to left, so take 2 ** 3 first.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>12</p>
        </statement>
        <feedback>
                    There are two exponentiations.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>256</p>
        </statement>
        <feedback>
                    Remember to multiply by 3.
                </feedback>
      </choice>
    </choices>
  </exercise>
  <p>Here are animations for the above expressions:</p>
  <exercise runestone="se_tq281"/>
  <exercise runestone="se_tq282"/>
  </subsection>
</section>
