<?xml version="1.0"?>
<section xml:id="simple-python-data_values-and-data-types">
  <title>Values and Data Types</title>
  <p>A <term>value</term> is one of the fundamental things &#x2014; like a word or a number &#x2014;
    that a program manipulates. The values we have seen so far are <c>5</c> (the result when we
    added <c>2 + 3</c>), and <c>"Hello, World!"</c>. We often refer to these values as <term>objects</term>
    and we will use the words value and object interchangeably.</p>
  <note>
    <p>Actually, the 2 and the 3 that are part of the addition above are values(objects) as well.</p>
  </note>
  <p>These objects are classified into different <term>classes</term>, or <term>data types</term>: <c>
    4</c> is an <em>integer</em>, and <c>"Hello, World!"</c> is a <em>string</em>, so-called because
    it contains a string or sequence of letters. You (and the interpreter) can identify strings
    because they are enclosed in quotation marks.</p>
  <p>If you are not sure what class a value falls into, Python has a function called <term>type</term>
    which can tell you.</p>
  <program xml:id="ac_valuesAndDataTypes_1" label="ac_valuesAndDataTypes_1" interactive="activecode"
    language="python">
    <input>
      print(type("Hello, World!"))
      print(type(17))
      print("Hello, World")
    </input>
  </program>
  <p>Not surprisingly, strings belong to the class <term>str</term> and integers belong to the class <term>
    int</term>.</p>
  <note>
    <p>When we show the value of a string using the <c>print</c> function, such as in the third
      example above, the quotes are not present in the output. The value of the string is the
      sequence of characters inside the quotes. The quotes are only necessary to help Python know
      what the value is.</p>
  </note>

  <p>In programming, a function is a subroutine, designed to perform a specific task. When you
    "call" a function, you're asking it to execute its task. Functions can take in information,
    known as arguments, work with that information, and then often return a result. For example, <em>
    print()</em> is a function which takes in a single string argument between the parentheses and
    performs the task: Printing the string argument we provided to the terminal.</p>

  <p> Let's take a closer look at the print statements above. <pre>print(type("Hello, World!"))</pre> What we have here is a
    function call inside a function call. In most, if not all programming languages, when you have a
    function call inside another function call, the following steps are taken: <ol>
      <li> Start by evaluating the function call(s) that are the most deeply nested. Process any
    arguments and return their results</li>
      <li>
        Continue this process, passing results from each function call to the next level up, until
    you reach the outermost function.
      </li>
      <li>
        Perform the operation of the outermost function with the final result from the previous
    step.
      </li>
    </ol>
    Going back to the examples, we first call the type() function with the argument "Hello, World!". The type() function
    returns the data type of the given value. In this case, "Hello, World!" is a string, so
    type("Hello, World!") will return &lt; class 'str' &gt;, indicating that the value is of type
    str (short for string). The print() function then outputs this result to the console, so when
    you run this line, you'll see &lt; class 'str' &gt;. print(type(17)): Similarly, this line calls
    the type() function with the argument 17. Since 17 is an integer, type(17) will return &lt;
    class 'int' &gt;, indicating that the value is of type int (short for integer). The print()
    function then outputs this result to the console, so running this line will display &lt; class
    'int' &gt;. </p>

  <!-- <p> You will get more familiar with functions (and design your own functions!) in the following
    weeks. -->
    <p>
   Don't worry if this seems challenging. As we progress in the course you'll get more familiar with functions and even design your own!
   
     Each new concept and challenge is a chance to develop your problem-solving skills and enhance your programming abilities. 
      Every mistake and difficulty is a valuable part of the learning process. Stay engaged and keep asking questions.
  
  </p>

  <p>Continuing with our discussion of data types, numbers with a decimal point belong to a class
    called <term>float</term>, because these numbers are represented in a format called <em>
    floating-point</em>. At this stage, you can treat the words <em>class</em> and <em>type</em>
    interchangeably. We'll come back to a deeper understanding of what a class is in later chapters.</p>
  <program xml:id="ac_valuesAndDataTypes_2" label="ac_valuesAndDataTypes_2" interactive="activecode"
    language="python">
    <input>
      print(type(17))
      print(type(3.2))
    </input>
  </program>
  <p>What about values like <c>"17"</c> and <c>"3.2"</c>? They look like numbers, but they are in
    quotation marks like strings.</p>
  <program xml:id="ac_valuesAndDataTypes_3" label="ac_valuesAndDataTypes_3" interactive="activecode"
    language="python">
    <input>
      print(type("17"))
      print(type("3.2"))
    </input>
  </program>
  <p>They're strings!</p>
  <p>Strings in Python can be enclosed in either single quotes (<c>'</c>) or double quotes (<c>"</c>
    - the double quote character), or three of the same separate quote characters (<c>'''</c> or <c>
    """</c>).</p>
  <program xml:id="ac_valuesAndDataTypes_4" label="ac_valuesAndDataTypes41" interactive="activecode"
    language="python">
    <input>
      print(type('This is a string.') )
      print(type("And so is this.") )
      print(type("""and this.""") )
      print(type('''and even this...''') )
    </input>
  </program>
  <p>Double quoted strings can contain single quotes inside them, as in <c>"Bruce's
      beard"</c>, and single quoted strings can have double quotes inside them, as in <c>'The
    knights who say "Ni!"'</c>. Strings enclosed with three occurrences of either quote symbol are
    called triple quoted strings. They can contain either single or double quotes:</p>
  <program xml:id="ac_valuesAndDataTypes_5" label="ac_valuesAndDataTypes_5" interactive="activecode"
    language="python">
    <input>
      print('''"Oh no", she exclaimed, "Ben's bike is broken!"''')
    </input>
  </program>
  <p>Triple quoted strings can even span multiple lines:</p>
  <program xml:id="ac_valuesAndDataTypes_6" label="ac_valuesAndDataTypes_6" interactive="activecode"
    language="python">
    <input>
      print("""This message will span
      several lines
      of the text.""")
    </input>
  </program>
  <p>Python doesn't care whether you use single or double quotes or the
    three-of-a-kind quotes to surround your strings. Once it has parsed the text of
    your program or command, the way it stores the value is identical in all cases,
    and the surrounding quotes are not part of the value.</p>
  <program xml:id="ac_valuesAndDataTypes_7" label="ac_valuesAndDataTypes_7" interactive="activecode"
    language="python">
    <input>
      print('This is a string.')
      print("""And so is this.""")
    </input>
  </program>
  <p>So the Python language designers usually chose to surround their strings by
    single quotes. What do you think would happen if the string already contained
    single quotes?</p>
  <p>When you type a large integer, you might be tempted to use commas between groups of three
    digits, as in <c>42,000</c>. This is not a legal integer in Python, but it does mean something
    else, which is legal:</p>
  <program xml:id="ac_valuesAndDataTypes_8" label="ac_valuesAndDataTypes_8" interactive="activecode"
    language="python">
    <input>
      print(42000)
      print(42,000)
    </input>
  </program>
  <p>Well, that's not what we expected at all! Because of the comma, Python chose to treat this as a <em>
    pair</em> of values. In fact, the print function can print any number of values as long as you
    separate them by commas. Notice that the values are separated by spaces when they are displayed.</p>
  <program xml:id="ac_valuesAndDataTypes_9" label="ac_valuesAndDataTypes_9" interactive="activecode"
    language="python">
    <input>
      print(42, 17, 56, 34, 11, 4.35, 32)
      print(3.4, "hello", 45)
    </input>
  </program>
  <p>Remember not to put commas or spaces in your integers, no
    matter how big they are. Also revisit what we said in the previous chapter:
    formal languages are strict, the notation is concise, and even the smallest
    change might mean something quite different from what you intended.</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="mc_valuesAndDataTypes_1">
    <statement>
      <p>How can you determine the type of a variable?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Print out the value and determine the data type based on the value printed.</p>
        </statement>
        <feedback>
          You may be able to determine the data type based on the printed value, but it may also be
          deceptive, like when a string prints, there are no quotes around it.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>Use the type function.</p>
        </statement>
        <feedback>
          The type function will tell you the class the value belongs to.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Use it in a known equation and print the result.</p>
        </statement>
        <feedback>
          Only numeric values can be used in equations.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Look at the declaration of the variable.</p>
        </statement>
        <feedback>
          In Python variables are not declared.
        </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="mc_valuesAndDataTypes_2">
    <statement>
      <p>What is the data type of &#x2018;this is what kind of data'?</p>
    </statement>
    <choices>
      <choice>
        <statement>
          <p>Character</p>
        </statement>
        <feedback>
          It is not a single character.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Integer</p>
        </statement>
        <feedback>
          The data is not numeric.
        </feedback>
      </choice>
      <choice>
        <statement>
          <p>Float</p>
        </statement>
        <feedback>
          The value is not numeric with a decimal point.
        </feedback>
      </choice>
      <choice correct="yes">
        <statement>
          <p>String</p>
        </statement>
        <feedback>
          Strings can be enclosed in single quotes.
        </feedback>
      </choice>
    </choices>
  </exercise>
</section>