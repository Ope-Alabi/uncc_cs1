<?xml version="1.0"?>
<section xml:id="simple-python-output">
  <title>Output</title>
  <!--<video xml:id="inputvid" youtube="2KYixkCBXSQ" width="auto"/>-->
  <p>In general, you cannot perform mathematical operations on strings, even if the strings look like numbers. The following are illegal (assuming that <c>message</c> has type string):  </p>
  
  <program language="python">
    <input>
        message - 1
        "Hello" / 123
        message * "Hello"
        "15" + 2
    </input>
  </program>

  <p>Interestingly, the <c>+</c> operator does work with strings, but for strings, the <c>+</c> operator represents <term>concatenation</term>, not addition. Concatenation means joining the two operands by linking them end-to-end. For example:</p>
  <program xml:id="ch2_sec7_p1" interactive="activecode" language="python">
    <input>
        fruit = "banana"
        bakedgood = " nut bread"
        print(fruit + bakedGood)
        </input>
  </program>
  <p>The output of this program is <c>banana nut bread</c>. The space before the word <c>nut</c> is part of the string and is necessary to produce the space between the concatenated strings. Take out the space and run it again. </p>

  <p>The <c>*</c> operator also works on strings. It performs repetition. For example, <c>'Fun'*3</c> is <c>'FunFunFun'</c>. One of the operands has to be a string and the other has to be an integer.</p>

            <program xml:id="ch2_sec7_p2" interactive="activecode" language="python">
              <input>
                print("Go" * 6)

                name = "Packers"
                print(name * 3)

                print(name + "Go" * 3)

                print((name + "Go") * 3)

              </input>
            </program>
  <p>This interpretation of <c>+</c> and <c>*</c> makes sense by analogy with addition and multiplication. Just as <c>4*3</c> is equivalent to <c>4+4+4</c>, we expect <c>"Go"*3</c> to be the same as <c>"Go"+"Go"+"Go"</c>, and it is. Note also in the last example that the order of operations for <c>*</c> and <c>+</c> is the same as it was for arithmetic. The repetition is done before the concatenation. If you want to cause the concatenation to be done first, you will need to use parenthesis. </p>

  <subsection xml:id="type_conversion_functions">
    <title>Type conversion functions</title>

    <p>Variables have
      types; again, we can ask the interpreter what they are.</p>
<program xml:id="ch2_sec8_p15" interactive="activecode" language="python">
<input>
message = "What's up, Doc?"
n = 17
pi = 3.14159

print(type(message))
print(type(n))
print(type(pi))
</input>
</program>
<p>The type of a variable is the type of the object it currently refers to.</p>

    <p>Sometimes it is necessary to convert values from one type to another.  Python provides
      a few simple functions that will allow us to do that.  The functions <c>int</c>, <c>float</c> and <c>str</c>
      will (attempt to) convert their arguments into types <title_reference>int</title_reference>, <title_reference>float</title_reference> and <title_reference>str</title_reference>
      respectively.  We call these <term>type conversion</term> functions.</p>
<p>The <c>int</c> function can take a floating point number or a string, and turn it
      into an int. For floating point numbers, it <em>discards</em> the decimal portion of
      the number - a process we call <em>truncation towards zero</em> on the number line.
      Let us see this in action:</p>

      <program xml:id="ch2_sec8_p3" interactive="activecode" language="python">
        <input>
          print(3.14)
          print(int(3.14))
            </input>
      </program>

      <program xml:id="ch2_sec8_p4" interactive="activecode" language="python">
        <input>
          print(3.9999)
          print(int(3.9999))       # This doesn't round to the closest int!
            </input>
      </program>

      <program xml:id="ch2_sec8_p5" interactive="activecode" language="python">
        <input>
          print(3.0)
          print(int(3.0))
            </input>
      </program>

      <program xml:id="ch2_sec8_p6" interactive="activecode" language="python">
        <input>
          print(-3.999)
          print(int(-3.999))        # Note that the result is closer to zero
            </input>
      </program>

      <program xml:id="ch2_sec8_p7" interactive="activecode" language="python">
        <input>
          print("2345")
          print(int("2345"))        # parse a string to produce an int
            </input>
      </program>

      <program xml:id="ch2_sec8_p8" interactive="activecode" language="python">
        <input>
          print(17)
          print(int(17))               # int even works on integers
            </input>
      </program>

      <program xml:id="ch2_sec8_p9" label="ac_tcf_9" interactive="activecode" language="python">
        <input>
    print(int("23bottles"))
            </input>
      </program>

      <p>The last case shows that a string has to be a syntactically legal number,
        otherwise you'll get one of those pesky runtime errors.  Modify the example by deleting the
        <c>bottles</c> and rerun the program.  You should see the integer <c>23</c>.</p>
<p>The type converter <c>float</c> can turn an integer, a float, or a syntactically
        legal string into a float.</p>
<program xml:id="ch2_sec8_p10" interactive="activecode" language="python">
<input>
print(float("123.45"))
print(type(float("123.45")))
    </input>
</program>
<p>The type converter <c>str</c> turns its argument into a string.  Remember that when we print a string, the
        quotes are removed.  However, if we print the type, we can see that it is definitely <title_reference>str</title_reference>.</p>
<program xml:id="ch2_sec8_p11" interactive="activecode" language="python">
<input>
print(str(17))
print(str(123.45))
print(type(str(123.45)))
    </input>
</program>
      
  </subsection>

  <p>To modify our previous program, we will add an input statement to allow the user to enter the number of seconds.  Then
            we will convert that string to an integer.  From there the process is the same as before.  To complete the example, we will
            print some appropriate output.</p>
  <program xml:id="ch2_sec8_p12" interactive="activecode" language="python">
    <input>
str_seconds = input("Please enter the number of seconds you wish to convert")
total_secs = int(str_seconds)

hours = total_secs // 3600
secs_still_remaining = total_secs % 3600
minutes =  secs_still_remaining // 60
secs_finally_remaining = secs_still_remaining  % 60

print("Hrs=", hours, "mins=", minutes, "secs=", secs_finally_remaining)
        </input>
  </program>
  <p>The variable <c>str_seconds</c> will refer to the string that is entered by the user. As we said above, even though this string may be <c>7684</c>, it is still a string and not a number.  To convert it to an integer, we use the <c>int</c> function.
            The result is referred to by <c>total_secs</c>.  Now, each time you run the program, you can enter a new value for the number of seconds to be converted.</p>
  <p>
    <term>Check your understanding</term>
  </p>
  <exercise label="ch2_sec8_q1">
    <statement>
      <p>What is printed when the following statements execute?</p>
      <program language="python">
        <input>
n = input("Please enter your age: ")
# user types in 18
print ( type(n) )
</input>
      </program>
    </statement>
    <choices>
      <choice correct="yes">
        <statement>
          <p>&lt;class 'str'&gt;</p>
        </statement>
        <feedback>
                    All input from users is read in as a string.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>&lt;class 'int'&gt;</p>
        </statement>
        <feedback>
                    Even though the user typed in an integer, it does not come into the program as an integer.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>&lt;class 18&gt;</p>
        </statement>
        <feedback>
                    18 is the value of what the user typed, not the type of the data.
                </feedback>
      </choice>
      <choice>
        <statement>
          <p>18</p>
        </statement>
        <feedback>
                    18 is the value of what the user typed, not the type of the data.
                </feedback>
      </choice>
    </choices>
  </exercise>
  <exercise label="ch2_sec8_q2">

    <statement>
      <p>Click on all of the variables of type `int` in the code below</p>
    </statement>
    <areas>
    <cline><area correct="no">seconds</area> = input("Please enter the number of seconds you wish to convert")</cline>
    <p></p>
    <cline><area>hours</area> = int(<area correct="no">seconds</area>) // 3600</cline>
    <cline><area>total_secs</area> = int(<area correct="no">seconds</area>)</cline>
    <cline><area>secs_still_remaining</area> = <area>total_secs</area> % 3600</cline>
    <cline>print(<area>secs_still_remaining</area>)</cline>


    </areas>
  </exercise>
  <exercise label="ch2_sec8_q3">

    <statement>
      <p>Click on all of the variables of type `str` in the code below</p>
    </statement>
    <areas>
    <cline><area>seconds</area> = input("Please enter the number of seconds you wish to convert")</cline>
    <p></p>
    <cline><area correct ="no">hours</area> = int(<area>seconds</area>) // 3600</cline>
    <cline><area correct="no">total_secs</area> = int(<area>seconds</area>)</cline>
    <cline><area correct="no">secs_still_remaining</area> = <area correct="no">total_secs</area> % 3600</cline>
    <cline>print(<area correct ="no">secs_still_remaining</area>)</cline>


    </areas>
  </exercise>
</section>
